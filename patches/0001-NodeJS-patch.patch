From f294a4b3681f01ba58dcceda68bc896fe25be483 Mon Sep 17 00:00:00 2001
From: Sylvain Ageneau <ageneau@gmail.com>
Date: Sat, 25 Feb 2017 17:50:52 +0100
Subject: [PATCH] NodeJS patch

---
 src/dbasepool.cpp |    1 -
 src/sc_base.cpp   |   16 +-
 src/tkscid.cpp    | 1270 +++++++++++++++++++++++++++++++----------------------
 src/tkscid.h      |  208 ++++-----
 src/ui.h          |    8 +-
 src/ui_tcltk.h    |   19 +-
 6 files changed, 877 insertions(+), 645 deletions(-)

diff --git a/src/dbasepool.cpp b/src/dbasepool.cpp
index ef07293..a1383ad 100644
--- a/src/dbasepool.cpp
+++ b/src/dbasepool.cpp
@@ -17,7 +17,6 @@
 */
 
 #include "dbasepool.h"
-#include "ui.h"
 #include "scidbase.h"
 
 
diff --git a/src/sc_base.cpp b/src/sc_base.cpp
index 5d54613..12848f3 100644
--- a/src/sc_base.cpp
+++ b/src/sc_base.cpp
@@ -77,7 +77,7 @@ UI_res_t sc_base_compact(scidBaseT* dbase, UI_handle_t ti, int argc, const char*
 	} else if (argc == 4 && std::strcmp("stats", argv[3]) == 0) {
 		uint n_deleted, n_unused, n_sparse, n_badNameId;
 		errorT res = dbase->getCompactStat(&n_deleted, &n_unused, &n_sparse, &n_badNameId);
-		UI_List val(4);
+		UI_List val(ti);
 		val.push_back(n_deleted);
 		val.push_back(n_unused);
 		val.push_back(n_sparse);
@@ -247,8 +247,8 @@ UI_res_t sc_base_gameslist(scidBaseT* dbase, UI_handle_t ti, int argc, const cha
 		return UI_Result(ti, err);
 	}
 
-	UI_List res (count * 3);
-	UI_List ginfo(24);
+	UI_List res(ti);
+	UI_List ginfo(ti);
 	const NameBase* nb = dbase->getNameBase();
 	for (uint i = 0; i < count; ++i) {
 		uint idx = idxList[i];
@@ -363,7 +363,7 @@ UI_res_t sc_base_import(scidBaseT* dbase, UI_handle_t ti, int argc, const char**
 
 	if (err != OK) return UI_Result(ti, err);
 
-	UI_List res(2);
+	UI_List res(ti);
 	res.push_back(gamesSeen);
 	res.push_back(errorMsg);
 	return UI_Result(ti, OK, res);
@@ -379,7 +379,7 @@ UI_res_t sc_base_list(UI_handle_t ti, int argc, const char** argv)
 	if (argc != 2) return UI_Result(ti, ERROR_BadArg, usage);
 
 	std::vector<int> l = DBasePool::getHandles();
-	UI_List res(l.size());
+	UI_List res(ti);
 	for (size_t i=0, n=l.size(); i < n; i++) res.push_back(l[i]);
 	return UI_Result(ti, OK, res);
 }
@@ -496,7 +496,7 @@ UI_res_t sc_base_stats(const scidBaseT* dbase, UI_handle_t ti, int argc, const c
 
 	const char* subcmd = argv[3];
 	const scidBaseT::Stats& stats = dbase->getStats();
-	UI_List res(6);
+	UI_List res(ti);
 
 	enum { OPT_DATE, OPT_ECO, OPT_FLAG, OPT_FLAGS, OPT_RATINGS, OPT_RESULTS };
 	const char * options[] = { "dates", "eco", "flag", "flags", "ratings", "results", NULL };
@@ -647,8 +647,8 @@ UI_res_t sc_base_tournaments(const scidBaseT* dbase, UI_handle_t ti, int argc, c
 
 	char buf_date[16];
 	const NameBase* nb = dbase->getNameBase();
-	UI_List res(std::distance(it, it_end));
-	UI_List tourney(14);
+	UI_List res(ti);
+	UI_List tourney(ti);
 	for (; it != it_end; it++) {
 		tourney.clear();
 		date_DecodeToString(it->getStartDate(), buf_date);
diff --git a/src/tkscid.cpp b/src/tkscid.cpp
index da55409..7c94542 100644
--- a/src/tkscid.cpp
+++ b/src/tkscid.cpp
@@ -52,6 +52,24 @@
 //TODO: delete
 #include "tkscid.h"
 
+#ifdef NODEJS
+#include <node.h>
+using v8::Exception;
+using v8::FunctionCallbackInfo;
+using v8::Isolate;
+using v8::Integer;
+using v8::Local;
+using v8::Object;
+using v8::String;
+using v8::Boolean;
+using v8::Value;
+#define SCID_OK 0
+#define SCID_ERROR -1
+#else
+#define SCID_OK TCL_OK
+#define SCID_ERROR TCL_ERROR
+#endif
+
 
 //TODO: delete
 extern scidBaseT* db;
@@ -77,8 +95,14 @@ void scid_Exit(void*) {
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // Main procedure
 //
+
+#ifndef NODEJS
 int
 main(int argc, char * argv[])
+#else
+int
+scid_main(int argc, char * argv[])
+#endif
 {
 	srand(time(NULL));
 
@@ -109,6 +133,7 @@ static uint htmlDiagStyle = 0;
 #define PROBE_OPTIMAL 4
 
 
+#ifndef NODEJS
 
 //////////////////////////////////////////////////////////////////////
 //
@@ -120,10 +145,10 @@ static uint htmlDiagStyle = 0;
 //    Inline function to set the Tcl interpreter result to a
 //    constant string.
 inline int
-setResult (Tcl_Interp * ti, const char * str)
+setResult (UI_handle_t ti, const char * str)
 {
     Tcl_SetResult (ti, (char *) str, TCL_STATIC);
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -131,12 +156,12 @@ setResult (Tcl_Interp * ti, const char * str)
 //    Inline function to set the Tcl interpreter result to a
 //    signed integer value.
 inline int
-setIntResult (Tcl_Interp * ti, int i)
+setIntResult (UI_handle_t ti, int i)
 {
     char temp [20];
     sprintf (temp, "%d", i);
     Tcl_SetResult (ti, temp, TCL_VOLATILE);
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -144,12 +169,12 @@ setIntResult (Tcl_Interp * ti, int i)
 //    Inline function to set the Tcl interpreter result to an
 //    unsigned integer value.
 inline int
-setUintResult (Tcl_Interp * ti, uint i)
+setUintResult (UI_handle_t ti, uint i)
 {
     char temp [20];
     sprintf (temp, "%u", i);
     Tcl_SetResult (ti, temp, TCL_VOLATILE);
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -157,12 +182,12 @@ setUintResult (Tcl_Interp * ti, uint i)
 //    Inline function to append the specified unsigned value to the
 //    Tcl interpreter result.
 inline int
-appendUintResult (Tcl_Interp * ti, uint i)
+appendUintResult (UI_handle_t ti, uint i)
 {
     char temp [20];
     sprintf (temp, "%u", i);
     Tcl_AppendResult (ti, temp, NULL);
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -170,25 +195,33 @@ appendUintResult (Tcl_Interp * ti, uint i)
 //    Inline function to append the specified unsigned value to the
 //    Tcl interpreter list result.
 inline uint
-appendUintElement (Tcl_Interp * ti, uint i)
+appendUintElement (UI_handle_t ti, uint i)
 {
     char temp[20];
     sprintf (temp, "%u", i);
     Tcl_AppendElement (ti, temp);
-    return TCL_OK;
+    return SCID_OK;
 }
 
+inline uint
+appendStringElement (UI_handle_t ti, const char* string)
+{
+    Tcl_AppendElement (ti, string);
+    return SCID_OK;
+}
+
+
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // setUintWidthResult():
 //    Inline function to set the Tcl interpreter result to an
 //    unsigned integer value, with zeroes to pad to the desired width.
 inline int
-setUintWidthResult (Tcl_Interp * ti, uint i, uint width)
+setUintWidthResult (UI_handle_t ti, uint i, uint width)
 {
     char temp [20];
     sprintf (temp, "%0*u", width, i);
     Tcl_SetResult (ti, temp, TCL_VOLATILE);
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -196,21 +229,22 @@ setUintWidthResult (Tcl_Interp * ti, uint i, uint width)
 //    Inline function to append the specified character value to the
 //    Tcl interpreter result.
 inline int
-appendCharResult (Tcl_Interp * ti, char ch)
+appendCharResult (UI_handle_t ti, char ch)
 {
     char tempStr [4];
     tempStr[0] = ch;
     tempStr[1] = 0;
     Tcl_AppendResult (ti, tempStr, NULL);
-    return TCL_OK;
+    return SCID_OK;
 }
 
+
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // translate:
 //    Return the translation for a phrase.
 //
 inline const char *
-translate (Tcl_Interp * ti, const char * name, const char * defaultText)
+translate (UI_handle_t ti, const char * name, const char * defaultText)
 {
     const char * str = Tcl_GetVar2 (ti, "tr", (char *) name, TCL_GLOBAL_ONLY);
     if (str == NULL) { str = defaultText; }
@@ -218,34 +252,48 @@ translate (Tcl_Interp * ti, const char * name, const char * defaultText)
 }
 
 inline const char *
-translate (Tcl_Interp * ti, const char * name)
+translate (UI_handle_t ti, const char * name)
 {
     return translate (ti, name, name);
 }
 
-inline int errorResult (Tcl_Interp * ti, errorT err, const char* errorMsg = 0) {
+inline int errorResult (UI_handle_t ti, errorT err, const char* errorMsg = 0) {
     if (errorMsg != 0) Tcl_SetResult (ti, (char*) errorMsg, TCL_STATIC);
     ASSERT(err != OK);
     Tcl_SetObjErrorCode(ti, Tcl_NewIntObj(err));
-    return TCL_ERROR;
+    return SCID_ERROR;
 }
-inline int errorResult (Tcl_Interp * ti, const char* errorMsg) {
+inline int errorResult (UI_handle_t ti, const char* errorMsg) {
     return errorResult(ti, ERROR_BadArg, errorMsg);
 }
 
+inline void
+appendResult(UI_handle_t ti, ...) {
+    va_list ap;
+    va_start(ap, ti);
+
+    Tcl_AppendResultVA(ti, ap);
+    va_end(ap);
+}
+
+const char * getLanguage(UI_handle_t ti) {
+    return Tcl_GetVar (ti, "language", TCL_GLOBAL_ONLY);
+}
+
+
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // InvalidCommand():
 //    Given a Tcl Interpreter, a major command name (e.g. "sc_base") and
 //    a null-terminated array of minor commands, this function sets
 //    the interpreter's result to a useful error message listing the
 //    available subcommands.
-//    Returns TCL_ERROR, so caller can simply:
+//    Returns SCID_ERROR, so caller can simply:
 //        return InvalidCommand (...);
 //    instead of:
 //        InvalidCommand (...);
-//        return TCL_ERROR;
+//        return SCID_ERROR;
 int
-InvalidCommand (Tcl_Interp * ti, const char * majorCmd,
+InvalidCommand (UI_handle_t ti, const char * majorCmd,
                 const char ** minorCmds)
 {
     ASSERT (majorCmd != NULL);
@@ -255,9 +303,161 @@ InvalidCommand (Tcl_Interp * ti, const char * majorCmd,
         Tcl_AppendResult (ti, "   ", *minorCmds, "\n", NULL);
         minorCmds++;
     }
-    return TCL_ERROR;
+    return SCID_ERROR;
+}
+
+#else
+
+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+// setResult():
+//    Inline function to set the Node interpreter result to a
+//    constant string.
+inline int
+setResult (UI_handle_t ti, const char * str)
+{
+    ti->callback_info->GetReturnValue().Set(UI_impl::ObjMaker(ti, str));
+    return SCID_OK;
+}
+
+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+// setIntResult():
+//    Inline function to set the Tcl interpreter result to a
+//    signed integer value.
+inline int
+setIntResult (UI_handle_t ti, int i)
+{
+    ti->callback_info->GetReturnValue().Set(UI_impl::ObjMaker(ti, i));
+    return SCID_OK;
+}
+
+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+// setUintResult():
+//    Inline function to set the Tcl interpreter result to an
+//    unsigned integer value.
+inline int
+setUintResult (UI_handle_t ti, uint i)
+{
+    ti->callback_info->GetReturnValue().Set(UI_impl::ObjMaker(ti, i));
+    return SCID_OK;
+}
+
+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+// appendUintResult:
+//    Inline function to append the specified unsigned value to the
+//    Tcl interpreter result.
+inline int
+appendUintResult (UI_handle_t ti, uint i)
+{
+    printf("STUB: appendUintResult:%ui\n", i);
+    return SCID_OK;
+}
+
+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+// appendUintElement:
+//    Inline function to append the specified unsigned value to the
+//    Tcl interpreter list result.
+inline uint
+appendUintElement (UI_handle_t ti, uint i)
+{
+    printf("STUB: appendUintElement:%ui\n", i);
+    return SCID_OK;
 }
 
+inline uint
+appendStringElement (UI_handle_t ti, const char* string)
+{
+    printf("STUB: appendStringElement:%s\n", string);
+    return SCID_OK;
+}
+
+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+// setUintWidthResult():
+//    Inline function to set the Tcl interpreter result to an
+//    unsigned integer value, with zeroes to pad to the desired width.
+inline int
+setUintWidthResult (UI_handle_t ti, uint i, uint width)
+{
+    printf("STUB: setUintWidthResult:%ui, %ui\n", i, width);
+    return SCID_OK;
+}
+
+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+// appendCharResult:
+//    Inline function to append the specified character value to the
+//    Tcl interpreter result.
+inline int
+appendCharResult (UI_handle_t ti, char ch)
+{
+    printf("STUB: appendCharResult:%i\n", ch);
+    return SCID_OK;
+}
+
+inline void
+appendResult(UI_handle_t ti, ...) {
+    va_list ap;
+    va_start(ap, ti);
+    char* arg;
+    for(; arg = va_arg(ap, char*); arg != NULL) {
+        ti->result->push_back(arg);
+    }
+    va_end(ap);
+}
+
+
+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+// translate:
+//    Return the translation for a phrase.
+//
+inline const char *
+translate (UI_handle_t ti, const char * name, const char * defaultText)
+{
+    printf("STUB: translate:%s,%s\n", name, defaultText);
+    return SCID_OK;
+}
+
+inline const char *
+translate (UI_handle_t ti, const char * name)
+{
+    return translate (ti, name, name);
+}
+
+inline int errorResult (UI_handle_t ti, errorT err, const char* errorMsg = 0) {
+    Isolate* isolate = ti->callback_info->GetIsolate();
+
+    // Throw an Error that is passed back to JavaScript
+    isolate->ThrowException(Exception::Error(String::Concat(String::NewFromUtf8(isolate, "code:"), Integer::New(isolate, err)->ToString())));
+    return SCID_ERROR;
+}
+inline int errorResult (UI_handle_t ti, const char* errorMsg) {
+    return errorResult(ti, ERROR_BadArg, errorMsg);
+}
+
+//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+// InvalidCommand():
+//    Given a Tcl Interpreter, a major command name (e.g. "sc_base") and
+//    a null-terminated array of minor commands, this function sets
+//    the interpreter's result to a useful error message listing the
+//    available subcommands.
+//    Returns SCID_ERROR, so caller can simply:
+//        return InvalidCommand (...);
+//    instead of:
+//        InvalidCommand (...);
+//        return SCID_ERROR;
+int
+InvalidCommand (UI_handle_t ti, const char * majorCmd,
+                const char ** minorCmds)
+{
+    printf("STUB: InvalidCommand:%s\n", majorCmd);
+    return SCID_ERROR;
+}
+
+const char * getLanguage(UI_handle_t ti) {
+    printf("STUB: getLanguage\n");
+    return NULL;
+}
+
+
+#endif
 
 /************ End of Tcl result routines ***********/
 
@@ -266,13 +466,13 @@ InvalidCommand (Tcl_Interp * ti, const char * majorCmd,
 // Standard error messages:
 //
 const char *
-errMsgNotOpen (Tcl_Interp * ti)
+errMsgNotOpen (UI_handle_t ti)
 {
     return translate (ti, "ErrNotOpen", "This is not an open database.");
 }
 
 const char *
-errMsgSearchInterrupted (Tcl_Interp * ti)
+errMsgSearchInterrupted (UI_handle_t ti)
 {
     return translate (ti, "ErrSearchInterrupted",
                       "[Interrupted search; results are incomplete]");
@@ -290,7 +490,7 @@ errMsgSearchInterrupted (Tcl_Interp * ti)
 //    needing the standard slower [string match] or [string range]
 //    routines.
 int
-str_is_prefix (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+str_is_prefix (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: strIsPrefix <shortStr> <longStr>");
@@ -304,7 +504,7 @@ str_is_prefix (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Tcl command that returns the length of the common text at the start
 //    of two strings.
 int
-str_prefix_len (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+str_prefix_len (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: strPrefixLen <str> <str>");
@@ -317,7 +517,7 @@ str_prefix_len (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 // sc_base_inUse
 //  Returns 1 if the database slot is in use; 0 otherwise.
 int
-sc_base_inUse (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_base_inUse (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const scidBaseT* basePtr = db;
     if (argc > 2) {
@@ -365,7 +565,7 @@ exportGame (Game * g, FILE * exportFile, gameFormatT format, uint pgnStyle)
 //    Exports the current game or all filter games in the database
 //    to a PGN, HTML or LaTeX file.
 int
-sc_base_export (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_base_export (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     FILE * exportFile = NULL;
     bool exportFilter = false;
@@ -534,7 +734,7 @@ sc_base_export (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
     fputs (endText, exportFile);
     fclose (exportFile);
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -543,7 +743,7 @@ sc_base_export (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    returns a list of 64 integers indicating how frequently
 //    the specified piece moves to each square.
 int
-sc_base_piecetrack (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_base_piecetrack (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage =
         "Usage: sc_base piecetrack [-g|-t] <minMoves> <maxMoves> <startSquare ...>";
@@ -595,9 +795,10 @@ sc_base_piecetrack (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     // If current base is unused, filter is empty, or no track
     // squares specified, then just return a zero-filled list:
 
+    UI_List ret(ti);
     if (! db->inUse  ||  db->dbFilter->Count() == 0  ||  nTrackSquares == 0) {
-        for (uint i=0; i < 64; i++) { appendUintElement (ti, 0); }
-        return TCL_OK;
+        for (uint i=0; i < 64; i++) { ret.push_back(0); }
+        return UI_Result(ti, OK, ret);
     }
 
     // Examine every filter game and track the selected pieces:
@@ -720,10 +921,11 @@ sc_base_piecetrack (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     // the value for each square is the number of plies when a
     // tracked piece was on it, so halve it to convert to moves:
 
+    UI_List res(ti);
     for (uint i=0; i < 64; i++) {
-        appendUintElement (ti, timeOnSquareMode ? sqFreq[i] / 2 : sqFreq[i]);
+        res.push_back(timeOnSquareMode ? sqFreq[i] / 2 : sqFreq[i]);
     }
-    return TCL_OK;
+    return UI_Result(ti, OK, res);
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -1077,7 +1279,7 @@ sc_base_duplicates (scidBaseT* dbase, UI_handle_t ti, int argc, const char ** ar
 //      strip <tag>: Remove all occurrences of the
 //                   specified tag from the database.
 int
-sc_base_tag (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_base_tag (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_base tag [filter <tagname> | list | strip <tagname>]";
     const char * options[] = {
@@ -1178,28 +1380,29 @@ sc_base_tag (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     // If necessary, update index and name files:
     if (cmd == TAG_STRIP) {
         if (nEditedGames > 0) db->clearCaches();
-        setUintResult (ti, nEditedGames);
+        return UI_Result(ti, OK, nEditedGames);
     }
 
     // If listing extra tags, generate the list now:
+    UI_List res(ti);
     if (cmd == TAG_LIST) {
         for (uint i=0; i < tag_freq.size(); i++) {
             uint freq = tag_freq[i].second;
             const char* name = tag_freq[i].first.c_str();
             if (freq > 0  &&  !strEqual (name, "SetUp")) {
-                Tcl_AppendElement (ti, name);
-                appendUintElement (ti, freq);
+                res.push_back(name);
+                res.push_back(freq);
             }
         }
     }
-    return TCL_OK;
+    return UI_Result(ti, OK, res);
 }
 
 
 //////////////////////////////////////////////////////////////////////
 /// CLIPBASE functions
 
-int sc_clipbase_paste (scidBaseT* clipbase, Tcl_Interp * ti, int argc, const char ** argv);
+int sc_clipbase_paste (scidBaseT* clipbase, UI_handle_t ti, int argc, const char ** argv);
 
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -1207,7 +1410,7 @@ int sc_clipbase_paste (scidBaseT* clipbase, Tcl_Interp * ti, int argc, const cha
 //    Game clipbase functions.
 //    Copies a game to, or pastes from, the clipbase database.
 int
-sc_clipbase (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_clipbase (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     scidBaseT* clipbase = DBasePool::getBase(DBasePool::getClipBase());
 
@@ -1226,7 +1429,7 @@ sc_clipbase (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         clipbase->Close();
         clipbase->Open(FMODE_Memory, "<clipbase>");
         clipbase->idx->SetType (2);
-        return TCL_OK;
+        return SCID_OK;
 
     case CLIP_PASTE:
         return sc_clipbase_paste (clipbase, ti, argc, argv);
@@ -1235,17 +1438,17 @@ sc_clipbase (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_clipbase", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_clipbase_paste:
 //    Paste the active clipbase game, replacing the current game state.
 int
-sc_clipbase_paste (scidBaseT* clipbase, Tcl_Interp * ti, int argc, const char ** argv)
+sc_clipbase_paste (scidBaseT* clipbase, UI_handle_t ti, int argc, const char ** argv)
 {
     // Cannot paste the clipbase game when already in the clipbase:
-    if (db == clipbase) { return TCL_OK; }
+    if (db == clipbase) { return SCID_OK; }
 
     uint location = clipbase->game->GetPgnOffset ();
     db->bbuf->Empty();
@@ -1267,7 +1470,7 @@ sc_clipbase_paste (scidBaseT* clipbase, Tcl_Interp * ti, int argc, const char **
     // Move to the current position in the clipbase game:
     db->game->MoveToLocationInPGN (location);
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -1285,10 +1488,10 @@ struct ecoTranslateT {
 };
 
 static ecoTranslateT * ecoTranslations = NULL;
-void translateECO (Tcl_Interp * ti, const char * strFrom, DString * dstrTo);
+void translateECO (UI_handle_t ti, const char * strFrom, DString * dstrTo);
 
 int
-sc_eco (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_eco (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     int index = -1;
     static const char * options [] = {
@@ -1329,7 +1532,7 @@ sc_eco (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_eco", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -1348,7 +1551,7 @@ sc_eco (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    If the database is read-only, games can still be classified but
 //    the results will not be stored to the database file.
 int
-sc_eco_base (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_eco_base (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 4) {
         return errorResult (ti, "Usage: sc_eco base <bool:all_games> <bool:extensions>");
@@ -1469,7 +1672,7 @@ sc_eco_base (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    parameter <ply> is passed, it returns the ply depth of the
 //    deepest match instead of the ECO code.
 int
-sc_eco_game (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_eco_game (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     int found = 0;
     uint ply = 0;
@@ -1481,7 +1684,7 @@ sc_eco_game (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             return errorResult (ti, "Usage: sc_game eco [ply]");
         }
     }
-    if (!ecoBook) { return TCL_OK; }
+    if (!ecoBook) { return SCID_OK; }
 
     db->game->SaveState();
     db->game->MoveToPly (0);
@@ -1504,11 +1707,11 @@ sc_eco_game (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             ecoT ecoCode = eco_FromString (ecoStr.Data());
             ecoStringT ecoStr;
             eco_ToExtendedString (ecoCode, ecoStr);
-            Tcl_AppendResult (ti, ecoStr, NULL);
+            appendResult (ti, ecoStr, NULL);
         }
     }
     db->game->RestoreState ();
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -1516,26 +1719,26 @@ sc_eco_game (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Reads a book file for ECO classification.
 //    Returns the book size (number of positions).
 int
-sc_eco_read (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_eco_read (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
-    if (argc < 3) { return TCL_OK; }
+    if (argc < 3) { return SCID_OK; }
     if (ecoBook) { delete ecoBook; }
     ecoBook = new PBook;
     ecoBook->SetFileName (argv[2]);
     errorT err = ecoBook->ReadEcoFile();
     if (err != OK) {
         if (err == ERROR_FileOpen) {
-            Tcl_AppendResult (ti, "Unable to open the ECO file:\n",
+            appendResult (ti, "Unable to open the ECO file:\n",
                               argv[2], NULL);
         } else {
-            Tcl_AppendResult (ti, "Unable to load the ECO file:\n",
+            appendResult (ti, "Unable to load the ECO file:\n",
                               argv[2], NULL);
-            Tcl_AppendResult (ti, "\n\nError at line ", NULL);
+            appendResult (ti, "\n\nError at line ", NULL);
             appendUintResult (ti, ecoBook->GetLineNumber());
         }
         delete ecoBook;
         ecoBook = NULL;
-        return TCL_ERROR;
+        return SCID_ERROR;
     }
     return setUintResult (ti, ecoBook->Size());
 }
@@ -1545,14 +1748,14 @@ sc_eco_read (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Returns a listing of positions for the specified ECO prefix,
 //    in plain text or color (Scid hypertext) format.
 int
-sc_eco_summary (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_eco_summary (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     bool color = true;
     if (argc != 3  &&  argc != 4) {
         return errorResult (ti, "Usage: sc_eco summary <ECO-prefix> [<bool:color>]");
     }
     if (argc == 4) { color = strGetBoolean (argv[3]); }
-    if (!ecoBook) { return TCL_OK; }
+    if (!ecoBook) { return SCID_OK; }
     DString * dstr = new DString;
     DString * temp = new DString;
     bool inMoveList = false;
@@ -1591,17 +1794,17 @@ sc_eco_summary (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         }
         delete oldstr;
     }
-    Tcl_AppendResult (ti, dstr->Data(), NULL);
+    appendResult (ti, dstr->Data(), NULL);
     delete temp;
     delete dstr;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_eco_translate:
 //    Adds a new ECO openings phrase translation.
 int
-sc_eco_translate (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_eco_translate (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 5) {
         return errorResult (ti, "Usage: sc_eco translate <lang> <from> <to>");
@@ -1617,7 +1820,7 @@ sc_eco_translate (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     trans->from = strDuplicate (argv[3]);
     trans->to = strDuplicate (argv[4]);
     ecoTranslations = trans;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -1625,12 +1828,12 @@ sc_eco_translate (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Translates an ECO opening name into the current language.
 //
 void
-translateECO (Tcl_Interp * ti, const char * strFrom, DString * dstrTo)
+translateECO (UI_handle_t ti, const char * strFrom, DString * dstrTo)
 {
     ecoTranslateT * trans = ecoTranslations;
     dstrTo->Clear();
     dstrTo->Append (strFrom);
-    const char * language = Tcl_GetVar (ti, "language", TCL_GLOBAL_ONLY);
+    const char * language = getLanguage(ti);
     if (language == NULL) { return; }
     char lang = language[0];
     while (trans != NULL) {
@@ -1669,7 +1872,7 @@ translateECO (Tcl_Interp * ti, const char * strFrom, DString * dstrTo)
 //    remove:    removes game number <x> from the filter.
 //    stats:     prints filter statistics.
 int
-sc_filter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_filter (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     int index = -1;
     static const char * options [] = {
@@ -1796,7 +1999,7 @@ sc_filter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     case FILTER_SET:
         if (argc == 5) {
             filter.fill(strGetUnsigned(argv[4]));
-            return TCL_OK;
+            return SCID_OK;
         } else if (argc > 5) {
             uint gNum = strGetUnsigned (argv[5]);
             if (gNum > 0 && gNum <= dbase->numGames()) {
@@ -1823,7 +2026,7 @@ sc_filter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                     delete [] idxList;
                 }
                 filter.set(gNum -1, val);
-                return TCL_OK;
+                return SCID_OK;
             }
         }
         return errorResult (ti, "Usage: sc_filter set baseId filterName value [gnumber [count sortCrit] ]");
@@ -1833,7 +2036,7 @@ sc_filter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     case FILTER_RELEASE:
         dbase->deleteFilter(argv[3]);
-        return TCL_OK;
+        return SCID_OK;
 
     case FILTER_SEARCH:
         if (argc > 5) {
@@ -1847,8 +2050,8 @@ sc_filter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     case FILTER_TREESTATS: {
             std::vector<scidBaseT::TreeStat> stats = dbase->getTreeStat(filter);
-            UI_List res (stats.size());
-            UI_List ginfo(8);
+            UI_List res(ti);
+            UI_List ginfo(ti);
             for (uint i=0; i < stats.size(); i++) {
                 ginfo.clear();
                 ginfo.push_back(stats[i].SAN);
@@ -1906,7 +2109,7 @@ sc_filter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             if (argc > 8) fprintf(exportFile, "%s", argv[8]);
             fclose (exportFile);
             progress.report(1,1);
-            return TCL_OK;
+            return SCID_OK;
         }
         return errorResult (ti, "Usage: sc_filter export baseId filterName sortCrit filename <PGN|LaTeX> [header] [footer]");
 
@@ -1932,7 +2135,7 @@ sc_filter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    the other does not, the other rating will be assumed to be
 //    same as the nonzero rating, up to a maximum of 2200.
 int
-sc_filter_freq (scidBaseT* dbase, const HFilter& filter, Tcl_Interp * ti, int argc, const char ** argv)
+sc_filter_freq (scidBaseT* dbase, const HFilter& filter, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage =
         "Usage: sc_filter freq baseId filterName date|elo|move <startDate|minElo|lowerhalfMove> [<endDate|maxElo|higherhalfMove>] [GuessElo]";
@@ -2034,9 +2237,11 @@ sc_filter_freq (scidBaseT* dbase, const HFilter& filter, Tcl_Interp * ti, int ar
             }
         }
     }
-    appendUintElement (ti, filteredCount);
-    appendUintElement (ti, allCount);
-    return TCL_OK;
+
+    UI_List ret(ti);
+    ret.push_back(filteredCount);
+    ret.push_back(allCount);
+    return UI_Result(ti, OK, ret);
 }
 
 //TODO:
@@ -2048,7 +2253,7 @@ sc_filter_freq (scidBaseT* dbase, const HFilter& filter, Tcl_Interp * ti, int ar
 //    Returns the game number of the first game in the filter,
 //    or 0 if the filter is empty.
 int
-sc_filter_first (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_filter_first (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
 	for (uint gnum=0; gnum < db->numGames(); gnum++) {
 		if (db->dbFilter->Get(gnum) == 0) continue;
@@ -2062,7 +2267,7 @@ sc_filter_first (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Returns the game number of the last game in the filter,
 //    or 0 if the filter is empty.
 int
-sc_filter_last (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_filter_last (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
 	long gnum = db->numGames();
 	for (gnum--; gnum >= 0; gnum--) {
@@ -2076,7 +2281,7 @@ sc_filter_last (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 // sc_filter_next:
 //    Returns number of next game in the filter.
 int
-sc_filter_next (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_filter_next (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (db->inUse) {
         uint nextNumber = db->gameNumber + 1;
@@ -2094,7 +2299,7 @@ sc_filter_next (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 // sc_filter_prev:
 //    Returns number of previous game in the filter.
 int
-sc_filter_prev (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_filter_prev (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (db->inUse) {
         int prevNumber = db->gameNumber - 1;
@@ -2114,7 +2319,7 @@ sc_filter_prev (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 // sc_filter_stats:
 //    Returns statistics about the filter.
 int
-sc_filter_stats (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_filter_stats (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     enum {STATS_ALL, STATS_ELO, STATS_YEAR};
 
@@ -2192,15 +2397,15 @@ sc_filter_stats (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
              results[RESULT_Draw],
              results[RESULT_Black],
              percentScore / 10, decimalPointChar, percentScore % 10);
-    Tcl_AppendResult (ti, temp, NULL);
-    return TCL_OK;
+    appendResult (ti, temp, NULL);
+    return SCID_OK;
 }
 
 //////////////////////////////////////////////////////////////////////
 ///  GAME functions
 
 int
-sc_game (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "altered",    "setaltered", "crosstable", "eco",
@@ -2385,7 +2590,7 @@ sc_game (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_game", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -2412,7 +2617,7 @@ isCrosstableGame (const IndexEntry* ie, idNumberT siteID, idNumberT eventID,
 // sc_game_crosstable:
 //    Returns the crosstable for the current game.
 int
-sc_game_crosstable (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_crosstable (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
 #ifndef WINCE
     static const char * options [] = {
@@ -2522,7 +2727,7 @@ sc_game_crosstable (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             default: return errorResult (ti, usageMsg);
         }
     }
-    if (!db->inUse) { return TCL_OK; }
+    if (!db->inUse) { return SCID_OK; }
 
     const char * newlineStr = "";
     switch (option) {
@@ -2555,10 +2760,10 @@ sc_game_crosstable (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
 
     idNumberT eventId = 0, siteId = 0;
     if (db->getNameBase()->FindExactName (NAME_EVENT, g->GetEventStr(), &eventId) != OK) {
-        return TCL_OK;
+        return SCID_OK;
     }
     if (db->getNameBase()->FindExactName (NAME_SITE, g->GetSiteStr(), &siteId) != OK) {
-        return TCL_OK;
+        return SCID_OK;
     }
 
     dateT eventDate = g->GetEventDate();
@@ -2624,7 +2829,7 @@ sc_game_crosstable (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
         {
             if (! tableFullMessage) {
                 tableFullMessage = true;
-                Tcl_AppendResult (ti, "Warning: Player limit reached; table is incomplete\n\n", NULL);
+                appendResult (ti, "Warning: Player limit reached; table is incomplete\n\n", NULL);
             }
             continue;
         }
@@ -2644,7 +2849,7 @@ sc_game_crosstable (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     }
     if (option == OPT_FILTER) {
         delete ctable;
-        return TCL_OK;
+        return SCID_OK;
     }
     if (ctable->NumPlayers() < 2) {
         delete ctable;
@@ -2652,7 +2857,7 @@ sc_game_crosstable (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     }
 
     if (option == OPT_LATEX) {
-        Tcl_AppendResult (ti, "\\documentclass[10pt,a4paper]{article}\n\n",
+        appendResult (ti, "\\documentclass[10pt,a4paper]{article}\n\n",
                           "\\usepackage{a4wide}\n\n",
                           "\\begin{document}\n\n",
                           "\\setlength{\\parindent}{0cm}\n",
@@ -2667,48 +2872,48 @@ sc_game_crosstable (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     if (mode == CROSSTABLE_AllPlayAll  &&
             ctable->NumPlayers() > apaLimit  &&
             !tableFullMessage) {
-        Tcl_AppendResult (ti, "Warning: Too many players for all-play-all; try displaying as a swiss tournament.\n\n", NULL);
+        appendResult (ti, "Warning: Too many players for all-play-all; try displaying as a swiss tournament.\n\n", NULL);
     }
 
     char stemp[1000];
     sprintf (stemp, "%s%s%s, ", g->GetEventStr(), newlineStr, g->GetSiteStr());
-    Tcl_AppendResult (ti, stemp, NULL);
+    appendResult (ti, stemp, NULL);
     date_DecodeToString (firstSeenDate, stemp);
     strTrimDate (stemp);
-    Tcl_AppendResult (ti, stemp, NULL);
+    appendResult (ti, stemp, NULL);
     if (lastSeenDate != firstSeenDate) {
         date_DecodeToString (lastSeenDate, stemp);
         strTrimDate (stemp);
-        Tcl_AppendResult (ti, " - ", stemp, NULL);
+        appendResult (ti, " - ", stemp, NULL);
     }
-    Tcl_AppendResult (ti, newlineStr, NULL);
+    appendResult (ti, newlineStr, NULL);
 
     eloT avgElo = ctable->AvgRating();
     if (avgElo > 0  &&  showRatings) {
-        Tcl_AppendResult (ti, translate (ti, "AverageRating", "Average Rating"),
+        appendResult (ti, translate (ti, "AverageRating", "Average Rating"),
                           ": ", NULL);
         appendUintResult (ti, avgElo);
         uint category = ctable->FideCategory (avgElo);
         if (category > 0  &&  mode == CROSSTABLE_AllPlayAll) {
             sprintf (stemp, "  (%s %u)",
                      translate (ti, "Category", "Category"), category);
-            Tcl_AppendResult (ti, stemp, NULL);
+            appendResult (ti, stemp, NULL);
         }
-        Tcl_AppendResult (ti, newlineStr, NULL);
+        appendResult (ti, newlineStr, NULL);
     }
 
     DString * dstr = new DString;
     if (mode != CROSSTABLE_AllPlayAll) { apaLimit = 0; }
     ctable->PrintTable (dstr, mode, apaLimit, db->gameNumber+1);
 
-    Tcl_AppendResult (ti, dstr->Data(), NULL);
+    appendResult (ti, dstr->Data(), NULL);
     if (option == OPT_LATEX) {
-        Tcl_AppendResult (ti, "\n\\end{document}\n", NULL);
+        appendResult (ti, "\n\\end{document}\n", NULL);
     }
     delete ctable;
     delete dstr;
 #endif
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -2720,7 +2925,7 @@ sc_game_crosstable (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
 //    a database where the number may be inaccurate due to database
 //    sorting or compaction.
 int
-sc_game_find (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_find (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 9) {
         return errorResult (ti, "sc_game_find: Incorrect parameters");
@@ -2789,7 +2994,7 @@ sc_game_find (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    get the first few moves of the specified game as  a text line.
 //    E.g., "sc_game firstMoves 4" might return "1.e4 e5 2.Nf3 Nf6"
 int
-sc_game_firstMoves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_firstMoves (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_game firstMoves <numMoves>");
@@ -2809,7 +3014,7 @@ sc_game_firstMoves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
 }
 
 int
-sc_game_import (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_import (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_game import <pgn-text>");
@@ -2828,13 +3033,13 @@ sc_game_import (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     if (err == OK  &&  parser.ErrorCount() == 0) {
         return setResult (ti, "PGN text imported with no errors or warnings.");
     }
-    Tcl_AppendResult (ti, "Errors/warnings importing PGN text:\n\n",
+    appendResult (ti, "Errors/warnings importing PGN text:\n\n",
                           parser.ErrorMessages(), NULL);
     if (err == ERROR_NotFound) {
-        Tcl_AppendResult (ti, "ERROR: No PGN header tag (e.g. ",
+        appendResult (ti, "ERROR: No PGN header tag (e.g. ",
                           "[Result \"1-0\"]) found.", NULL);
     }
-    return (err == OK ? TCL_OK : TCL_ERROR);
+    return (err == OK ? SCID_OK : SCID_ERROR);
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -2843,7 +3048,7 @@ sc_game_import (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    the score, a descriptive score with optimal moves, or just a
 //    (random) optimal move.
 bool
-probe_tablebase (Tcl_Interp * ti, int mode, DString * dstr)
+probe_tablebase (UI_handle_t ti, int mode, DString * dstr)
 {
     int score = 0;
     bool showResult = false;
@@ -3181,7 +3386,7 @@ probe_tablebase (Tcl_Interp * ti, int mode, DString * dstr)
 //    Return the Game Info string for the active game.
 //    The returned text includes color codes.
 int
-sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_info (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     bool hideNextMove = false;
     bool showMaterialValue = false;
@@ -3236,29 +3441,29 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                 commentHeight = strGetBoolean(argv[arg]);
             }
         } else if (strIsPrefix (argv[arg], "white")) {
-            Tcl_AppendResult (ti, db->game->GetWhiteStr(), NULL);
-            return TCL_OK;
+            appendResult (ti, db->game->GetWhiteStr(), NULL);
+            return SCID_OK;
         } else if (strIsPrefix (argv[arg], "welo")) {
             return setIntResult (ti, db->game->GetWhiteElo() );
         } else if (strIsPrefix (argv[arg], "black")) {
-            Tcl_AppendResult (ti, db->game->GetBlackStr(), NULL);
-            return TCL_OK;
+            appendResult (ti, db->game->GetBlackStr(), NULL);
+            return SCID_OK;
         } else if (strIsPrefix (argv[arg], "belo")) {
             return setIntResult (ti, db->game->GetBlackElo() );
         } else if (strIsPrefix (argv[arg], "event")) {
-            Tcl_AppendResult (ti, db->game->GetEventStr(), NULL);
-            return TCL_OK;
+            appendResult (ti, db->game->GetEventStr(), NULL);
+            return SCID_OK;
         } else if (strIsPrefix (argv[arg], "site")) {
-            Tcl_AppendResult (ti, db->game->GetSiteStr(), NULL);
-            return TCL_OK;
+            appendResult (ti, db->game->GetSiteStr(), NULL);
+            return SCID_OK;
         } else if (strIsPrefix (argv[arg], "round")) {
-            Tcl_AppendResult (ti, db->game->GetRoundStr(), NULL);
-            return TCL_OK;
+            appendResult (ti, db->game->GetRoundStr(), NULL);
+            return SCID_OK;
         } else if (strIsPrefix (argv[arg], "date")) {
             char dateStr [12];
             date_DecodeToString (db->game->GetDate(), dateStr);
-            Tcl_AppendResult (ti, dateStr, NULL);
-            return TCL_OK;
+            appendResult (ti, dateStr, NULL);
+            return SCID_OK;
         } else if (strIsPrefix (argv[arg], "year")) {
             return setUintResult (ti, date_GetYear (db->game->GetDate()));
         } else if (strIsPrefix (argv[arg], "result")) {
@@ -3267,34 +3472,34 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             db->game->GetSAN (temp);
             strcpy(tempTrans, temp);
             transPieces(tempTrans);
-            Tcl_AppendResult (ti, tempTrans, NULL);
-            return TCL_OK;
+            appendResult (ti, tempTrans, NULL);
+            return SCID_OK;
 // nextMoveNT is the same as nextMove, except that the move is not translated
         } else if (strIsPrefix (argv[arg], "nextMoveNT")) {
             db->game->GetSAN (temp);
-            Tcl_AppendResult (ti, temp, NULL);
-            return TCL_OK;
+            appendResult (ti, temp, NULL);
+            return SCID_OK;
 // returns next move played in UCI format
         } else if (strIsPrefix (argv[arg], "nextMoveUCI")) {
           db->game->GetNextMoveUCI (temp);
-          Tcl_AppendResult (ti, temp, NULL);
-          return TCL_OK;
+          appendResult (ti, temp, NULL);
+          return SCID_OK;
         } else if (strIsPrefix (argv[arg], "previousMove")) {
             db->game->GetPrevSAN (temp);
             strcpy(tempTrans, temp);
             transPieces(tempTrans);
-            Tcl_AppendResult (ti, tempTrans, NULL);
-            return TCL_OK;
+            appendResult (ti, tempTrans, NULL);
+            return SCID_OK;
 // previousMoveNT is the same as previousMove, except that the move is not translated
         } else if (strIsPrefix (argv[arg], "previousMoveNT")) {
             db->game->GetPrevSAN (temp);
-            Tcl_AppendResult (ti, temp, NULL);
-            return TCL_OK;
+            appendResult (ti, temp, NULL);
+            return SCID_OK;
 // returns previous move played in UCI format
         } else if (strIsPrefix (argv[arg], "previousMoveUCI")) {
             db->game->GetPrevMoveUCI (temp);
-            Tcl_AppendResult (ti, temp, NULL);
-            return TCL_OK;
+            appendResult (ti, temp, NULL);
+            return SCID_OK;
         } else if (strIsPrefix (argv[arg], "duplicate")) {
             uint dupGameNum = db->getDuplicates(db->gameNumber);
             return setUintResult (ti, dupGameNum);
@@ -3317,7 +3522,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
        //       );
     }
 
-    Tcl_AppendResult (ti, temp, NULL);
+    appendResult (ti, temp, NULL);
     eloT elo = db->game->GetWhiteElo();
     bool eloEstimated = false;
     if (elo == 0) {
@@ -3326,7 +3531,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
     if (elo != 0) {
         sprintf (temp, " <red>%u%s</red>", elo, eloEstimated ? "*" : "");
-        Tcl_AppendResult (ti, temp, NULL);
+        appendResult (ti, temp, NULL);
     }
     sprintf (temp, "  --  <pi %s>%s</pi>",
              db->game->GetBlackStr(), db->game->GetBlackStr());
@@ -3340,7 +3545,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
        //       tolower(db->game->FindExtraTag("BlackCountry")[2])
        //       );
     }
-    Tcl_AppendResult (ti, temp, NULL);
+    appendResult (ti, temp, NULL);
     elo = db->game->GetBlackElo();
     eloEstimated = false;
     if (elo == 0) {
@@ -3349,7 +3554,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
     if (elo != 0) {
         sprintf (temp, " <red>%u%s</red>", elo, eloEstimated ? "*" : "");
-        Tcl_AppendResult (ti, temp, NULL);
+        appendResult (ti, temp, NULL);
     }
 
     if (hideNextMove) {
@@ -3360,7 +3565,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                  RESULT_LONGSTR[db->game->GetResult()],
                  (db->game->GetNumHalfMoves() + 1) / 2);
     }
-    Tcl_AppendResult (ti, temp, NULL);
+    appendResult (ti, temp, NULL);
 
     if (db->game->GetEco() != 0) {
         ecoStringT fullEcoStr;
@@ -3368,20 +3573,20 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         ecoStringT basicEcoStr;
         strCopy (basicEcoStr, fullEcoStr);
         if (strLength(basicEcoStr) >= 4) { basicEcoStr[3] = 0; }
-        Tcl_AppendResult (ti, "   <blue><run ::windows::eco::Refresh ",
+        appendResult (ti, "   <blue><run ::windows::eco::Refresh ",
                           basicEcoStr, ">", fullEcoStr,
                           "</run></blue>", NULL);
     }
     char dateStr[20];
     date_DecodeToString (db->game->GetDate(), dateStr);
     strTrimDate (dateStr);
-    Tcl_AppendResult (ti, "   <red>", dateStr, "</red>", NULL);
+    appendResult (ti, "   <red>", dateStr, "</red>", NULL);
 
     if (db->gameNumber >= 0) {
         // Check if this game is deleted or has other user-settable flags:
         const IndexEntry* ie = db->getIndexEntry(db->gameNumber);
         if (ie->GetDeleteFlag()) {
-            Tcl_AppendResult (ti, "   <gray>(",
+            appendResult (ti, "   <gray>(",
                               translate (ti, "deleted"), ")</gray>", NULL);
         }
         char userFlags[16];
@@ -3391,7 +3596,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             // Skip over "D" for Deleted, as it is indicated above:
             if (*flagStr == 'D') { flagStr++; }
             if (*flagStr != 0) {
-                Tcl_AppendResult (ti, "   <gray>(",
+                appendResult (ti, "   <gray>(",
                                   translate (ti, "flags", "flags"),
                                   ": ", flagStr, NULL);
                 int flagCount = 0;
@@ -3412,23 +3617,23 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                         case 'U': flagName = "UserFlag"; break;
                     }
                     if (flagName != NULL) {
-                        Tcl_AppendResult (ti, (flagCount > 0 ? ", " : " - "),
+                        appendResult (ti, (flagCount > 0 ? ", " : " - "),
                                           translate (ti, flagName), NULL);
                     }
                     flagCount++;
                     flagStr++;
                 }
-                Tcl_AppendResult (ti, ")</gray>", NULL);
+                appendResult (ti, ")</gray>", NULL);
             }
         }
 
         if (db->game->FindExtraTag("Bib") != NULL) {
-           Tcl_AppendResult (ti, "  <red><run ::Bibliography::ShowRef>Bib</run></red>", NULL);
+           appendResult (ti, "  <red><run ::Bibliography::ShowRef>Bib</run></red>", NULL);
         }
 
         // Check if this game has a twin (duplicate):
         if (db->getDuplicates(db->gameNumber) != 0) {
-            Tcl_AppendResult (ti, "   <blue><run updateTwinChecker>(",
+            appendResult (ti, "   <blue><run updateTwinChecker>(",
                               translate (ti, "twin"), ")</run></blue>", NULL);
         }
     }
@@ -3436,7 +3641,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
              db->game->GetSiteStr(),
              db->game->GetEventStr(),
              db->game->GetRoundStr());
-    Tcl_AppendResult (ti, temp, NULL);
+    appendResult (ti, temp, NULL);
 
     char san [20];
     byte * nags;
@@ -3461,20 +3666,20 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                  prevMoveCount, toMove==WHITE ? ".." : "", tempTrans);//san);
         printNags = true;
     }
-    Tcl_AppendResult (ti, translate (ti, "LastMove", "Last move"), NULL);
-    Tcl_AppendResult (ti, ": <darkblue>", temp, "</darkblue>", NULL);
+    appendResult (ti, translate (ti, "LastMove", "Last move"), NULL);
+    appendResult (ti, ": <darkblue>", temp, "</darkblue>", NULL);
     nags = db->game->GetNags();
     if (printNags  &&  *nags != 0  &&  !hideNextMove) {
-        Tcl_AppendResult (ti, "<red>", NULL);
+        appendResult (ti, "<red>", NULL);
         for (uint nagCount = 0 ; nags[nagCount] != 0; nagCount++) {
             char nagstr[20];
             game_printNag (nags[nagCount], nagstr, true, PGN_FORMAT_Plain);
             if (nagCount > 0  ||  (nagstr[0] != '!' && nagstr[0] != '?')) {
-                Tcl_AppendResult (ti, " ", NULL);
+                appendResult (ti, " ", NULL);
             }
-            Tcl_AppendResult (ti, nagstr, NULL);
+            appendResult (ti, nagstr, NULL);
         }
-        Tcl_AppendResult (ti, "</red>", NULL);
+        appendResult (ti, "</red>", NULL);
     }
 
     // Now print next move:
@@ -3499,24 +3704,24 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                  moveCount, toMove==WHITE ? "" : "..", tempTrans);//san);
         printNags = true;
     }
-    Tcl_AppendResult (ti, "   ", translate (ti, "NextMove", "Next"), NULL);
-    Tcl_AppendResult (ti, ": <darkblue>", temp, "</darkblue>", NULL);
+    appendResult (ti, "   ", translate (ti, "NextMove", "Next"), NULL);
+    appendResult (ti, ": <darkblue>", temp, "</darkblue>", NULL);
     nags = db->game->GetNextNags();
     if (printNags  &&  !hideNextMove  &&  *nags != 0) {
-        Tcl_AppendResult (ti, "<red>", NULL);
+        appendResult (ti, "<red>", NULL);
         for (uint nagCount = 0 ; nags[nagCount] != 0; nagCount++) {
             char nagstr[20];
             game_printNag (nags[nagCount], nagstr, true, PGN_FORMAT_Plain);
             if (nagCount > 0  ||  (nagstr[0] != '!' && nagstr[0] != '?')) {
-                Tcl_AppendResult (ti, " ", NULL);
+                appendResult (ti, " ", NULL);
             }
-            Tcl_AppendResult (ti, nagstr, NULL);
+            appendResult (ti, nagstr, NULL);
         }
-        Tcl_AppendResult (ti, "</red>", NULL);
+        appendResult (ti, "</red>", NULL);
     }
 
     if (db->game->GetVarLevel() > 0) {
-        Tcl_AppendResult (ti, "   <green><run sc_var exit; updateBoard -animate>",
+        appendResult (ti, "   <green><run sc_var exit; updateBoard -animate>",
                           "(<lt>-Var)", "</run></green>", NULL);
     }
 
@@ -3524,22 +3729,22 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         uint mWhite = db->game->GetCurrentPos()->MaterialValue (WHITE);
         uint mBlack = db->game->GetCurrentPos()->MaterialValue (BLACK);
         sprintf (temp, "    <gray>(%u-%u", mWhite, mBlack);
-        Tcl_AppendResult (ti, temp, NULL);
+        appendResult (ti, temp, NULL);
         if (mWhite > mBlack) {
             sprintf (temp, ":+%u", mWhite - mBlack);
-            Tcl_AppendResult (ti, temp, NULL);
+            appendResult (ti, temp, NULL);
         } else if (mBlack > mWhite) {
             sprintf (temp, ":-%u", mBlack - mWhite);
-            Tcl_AppendResult (ti, temp, NULL);
+            appendResult (ti, temp, NULL);
         }
-        Tcl_AppendResult (ti, ")</gray>", NULL);
+        appendResult (ti, ")</gray>", NULL);
     }
 
     // Print first few variations if there are any:
 
     uint varCount = db->game->GetNumVariations();
     if (!hideNextMove  &&  varCount > 0) {
-        Tcl_AppendResult (ti, "<br>", translate (ti, "Variations"), ":", NULL);
+        appendResult (ti, "<br>", translate (ti, "Variations"), ":", NULL);
         for (uint vnum = 0; vnum < varCount && vnum < 5; vnum++) {
             char s[20];
             db->game->MoveIntoVariation (vnum);
@@ -3548,20 +3753,20 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             transPieces(tempTrans);
             sprintf (temp, "   <run sc_var enter %u; updateBoard -animate>v%u",
                      vnum, vnum+1);
-            Tcl_AppendResult (ti, "<green>", temp, "</green>: ", NULL);
+            appendResult (ti, "<green>", temp, "</green>: ", NULL);
             if (s[0] == 0) {
                 sprintf (temp, "<darkblue>(empty)</darkblue>");
             } else {
                 sprintf (temp, "<darkblue>%u.%s%s</darkblue>",
                          moveCount, toMove == WHITE ? "" : "..", tempTrans);//s);
             }
-            Tcl_AppendResult (ti, temp, NULL);
+            appendResult (ti, temp, NULL);
             byte * firstNag = db->game->GetNextNags();
             if (*firstNag >= NAG_GoodMove  &&  *firstNag <= NAG_DubiousMove) {
                 game_printNag (*firstNag, s, true, PGN_FORMAT_Plain);
-                Tcl_AppendResult (ti, "<red>", s, "</red>", NULL);
+                appendResult (ti, "<red>", s, "</red>", NULL);
             }
-            Tcl_AppendResult (ti, "</run>", NULL);
+            appendResult (ti, "</run>", NULL);
             db->game->MoveExitVariation ();
         }
     }
@@ -3569,7 +3774,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     // Check if this move has a comment:
 
     if (db->game->GetMoveComment() != NULL) {
-        Tcl_AppendResult (ti, "<br>", translate(ti, "Comment"),
+        appendResult (ti, "<br>", translate(ti, "Comment"),
                           " <green><run makeCommentWin>", NULL);
         char * str = strDuplicate(db->game->GetMoveComment());
         strTrimMarkCodes (str);
@@ -3584,11 +3789,11 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             if (ch == '\n') {
                 lines++;
                 if (lines >= commentHeight) { break; }
-                Tcl_AppendResult (ti, "<br>", NULL);
+                appendResult (ti, "<br>", NULL);
             } else if (ch == '<') {
-                Tcl_AppendResult (ti, "<lt>", NULL);
+                appendResult (ti, "<lt>", NULL);
             } else if (ch == '>') {
-                Tcl_AppendResult (ti, "<gt>", NULL);
+                appendResult (ti, "<gt>", NULL);
             } else {
                 appendCharResult (ti, ch);
             }
@@ -3602,10 +3807,10 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                 ch = *s;
             }
             if (ch != 0) {
-                Tcl_AppendResult (ti, "...", NULL);
+                appendResult (ti, "...", NULL);
             }
         }
-        Tcl_AppendResult (ti, "</run></green>", NULL);
+        appendResult (ti, "</run></green>", NULL);
 #ifdef WINCE
         my_Tcl_Free((char*) str);
 #else
@@ -3618,7 +3823,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     if (!hideNextMove) {
         DString * tbStr = new DString;
         if (probe_tablebase (ti, showTB, tbStr)) {
-            Tcl_AppendResult (ti, "<br>TB: <blue><run ::tb::open>",
+            appendResult (ti, "<br>TB: <blue><run ::tb::open>",
                               tbStr->Data(), "</run></blue>", NULL);
         }
         delete tbStr;
@@ -3636,7 +3841,7 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             if (len >= 4) { estr[3] = 0; }
             DString * tempDStr = new DString;
             translateECO (ti, ecoComment.Data(), tempDStr);
-            Tcl_AppendResult (ti, "<br>ECO:  <blue><run ::windows::eco::Refresh ",
+            appendResult (ti, "<br>ECO:  <blue><run ::windows::eco::Refresh ",
                               estr, ">", tempDStr->Data(),
                               "</run></blue>", NULL);
             delete tempDStr;
@@ -3645,16 +3850,16 @@ sc_game_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     if (showFEN) {
         char boardStr [200];
         db->game->GetCurrentPos()->PrintFEN (boardStr, FEN_ALL_FIELDS);
-        Tcl_AppendResult (ti, "<br><gray>", boardStr, "</gray>", NULL);
+        appendResult (ti, "<br><gray>", boardStr, "</gray>", NULL);
     }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_game_load:
 //    Takes a game number and loads the game
 int
-sc_game_load (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_load (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (!db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
@@ -3703,7 +3908,7 @@ sc_game_load (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Merge the specified game into a variation from the current
 //    game position.
 int
-sc_game_merge (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_merge (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_game merge <baseNum> <gameNum> [<endPly>]";
     if (argc < 4  ||  argc > 5) { return errorResult (ti, usage); }
@@ -3833,7 +4038,7 @@ sc_game_merge (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     // And exit the new variation:
     db->game->MoveExitVariation();
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -3843,7 +4048,7 @@ sc_game_merge (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    "nomoves" for standard algebraic without move numbers.
 //    Default output is standard algebraic with move numbers.
 int
-sc_game_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_moves (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     bool sanFormat = true;
     bool printMoves = true;
@@ -3894,11 +4099,13 @@ sc_game_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             delete[] moveStrings;
 #endif
 
-            return TCL_OK;
+            return SCID_OK;
         }
     }
     g->RestoreState();
     uint count = 0;
+
+    UI_List res(ti);
     for (uint i = plyCount; i > 0; i--, count++) {
         char move [20];
         if (sanFormat) {
@@ -3911,9 +4118,9 @@ sc_game_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             strCopy (move, moveStrings [i - 1]);
         }
         if (listFormat) {
-            Tcl_AppendElement (ti, move);
+            res.push_back(move);
         } else {
-            Tcl_AppendResult (ti, (count == 0 ? "" : " "), move, NULL);
+            appendResult (ti, (count == 0 ? "" : " "), move, NULL);
         }
     }
 #ifdef WINCE
@@ -3921,19 +4128,23 @@ sc_game_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 #else
     delete[] moveStrings;
 #endif
-    return TCL_OK;
+    if (listFormat) {
+        return UI_Result(ti, OK, res);
+    } else {
+        return SCID_OK;
+    }
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_game_new:
 //    Clears the current game.
 int
-sc_game_new (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_new (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     db->game->Clear();
     db->gameNumber = -1;
     db->gameAltered = false;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -3943,7 +4154,7 @@ sc_game_new (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    found in the selected database. It then moves to that point
 //    in the game and returns a text string of the move.
 int
-sc_game_novelty (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_novelty (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage =
         "Usage: sc_game novelty [-older] base";
@@ -4026,7 +4237,7 @@ sc_game_novelty (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //        active game.
 //      -unicode (0|1): use unicocde characters (e.g. U+2654 for king). Default=0.
 int
-sc_game_pgn (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_pgn (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "-column", "-comments", "-base", "-gameNumber", "-format",
@@ -4057,19 +4268,19 @@ sc_game_pgn (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     while (thisArg < argc) {
         int index = strUniqueMatch (argv[thisArg], options);
         if (index == -1) {
-            Tcl_AppendResult (ti, "Invalid option to sc_game pgn: ",
+            appendResult (ti, "Invalid option to sc_game pgn: ",
                               argv[thisArg], "; valid options are: ", NULL);
             for (const char ** s = options; *s != NULL; s++) {
-                Tcl_AppendResult (ti, *s, " ", NULL);
+                appendResult (ti, *s, " ", NULL);
             }
-            return TCL_ERROR;
+            return SCID_ERROR;
         }
 
         // Check that our option has a value:
         if (thisArg+1 == argc) {
-            Tcl_AppendResult (ti, "Invalid option value: sc_game pgn ",
+            appendResult (ti, "Invalid option value: sc_game pgn ",
                               options[index], " requires a value.", NULL);
-            return TCL_ERROR;
+            return SCID_ERROR;
         }
 
         uint value = strGetUnsigned (argv[thisArg+1]);
@@ -4149,15 +4360,15 @@ sc_game_pgn (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
 
     std::pair<const char*, unsigned> pgnBuf = g->WriteToPGN(lineWidth);
-    Tcl_AppendResult (ti, pgnBuf.first, NULL);
-    return TCL_OK;
+    appendResult (ti, pgnBuf.first, NULL);
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_game_pop:
 //    Restores the last game saved with sc_game_push.
 int
-sc_game_pop (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_pop (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (db->game->GetNextGame() != NULL) {
         Game * g = db->game->GetNextGame();
@@ -4165,7 +4376,7 @@ sc_game_pop (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         db->gameAltered = g->GetAltered();
         db->game = g;
     }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -4175,7 +4386,7 @@ sc_game_pop (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    If the optional argument "copy" is present, the new game will be
 //    a copy of the current game.
 int
-sc_game_push (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_push (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     bool copy = false;
     
@@ -4192,7 +4403,7 @@ sc_game_push (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     db->game = g;
     db->gameAltered = false;
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -4200,7 +4411,7 @@ sc_game_push (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Saves the current game. If the parameter is 0, a NEW
 //    game is added; otherwise, that game number is REPLACED.
 int
-sc_game_save (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_save (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     scidBaseT * dbase = db;
     Game* currGame = db->game;
@@ -4235,7 +4446,7 @@ sc_game_save (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    specified Tcl interpreter if a score is found.
 //
 static bool
-addScoreToList (Tcl_Interp * ti, int moveCounter, const char * comment,
+addScoreToList (UI_handle_t ti, UI_List& ret, int moveCounter, const char * comment,
                 bool negate, float min, float max)
 {
     char buffer[1024];
@@ -4249,14 +4460,14 @@ addScoreToList (Tcl_Interp * ti, int moveCounter, const char * comment,
     // OK, now we have found "+[digit]" or "-[digit]" in the comment,
     // so extract its evaluation and add it to our list:
     sprintf (buffer, "%.1f", (float)moveCounter * 0.5);
-    Tcl_AppendElement (ti, buffer);
+    ret.push_back (buffer);
     float f;
     sscanf (comment, "%f", &f);
     if (negate) { f = -f; }
     if (f < min) { f = min; }
     if (f > max) { f = max; }
     sprintf (buffer, "%.2f", f);
-    Tcl_AppendElement (ti, buffer);
+    ret.push_back (buffer);
     return true;
 }
 
@@ -4285,7 +4496,7 @@ addScoreToList (Tcl_Interp * ti, int moveCounter, const char * comment,
 //    first move, etc) and the second is the value found.
 //
 int
-sc_game_scores (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_scores (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     int moveCounter = 0;
     float max = 10.0;
@@ -4306,11 +4517,13 @@ sc_game_scores (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     Game * g = db->game;
     g->SaveState ();
     g->MoveToPly (0);
+
+    UI_List ret(ti);
     while (g->MoveForward() == OK) {
         moveCounter++;
         const char * comment = g->GetMoveComment();
         // Klimmek: use invertflags
-        if (addScoreToList (ti, moveCounter, comment, moveCounter % 2 ? inv_b : inv_w, min, max)) {
+        if (addScoreToList (ti, ret, moveCounter, comment, moveCounter % 2 ? inv_b : inv_w, min, max)) {
             continue;
         }
         // Now try finding a score in the comment at the start of the
@@ -4318,7 +4531,7 @@ sc_game_scores (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         if (g->GetNumVariations() > 0) {
             g->MoveIntoVariation (0);
             comment = g->GetMoveComment();
-            addScoreToList (ti, moveCounter, comment,
+            addScoreToList (ti, ret, moveCounter, comment,
                             //false,
                             // For the annotate format of crafty before v18,
                             // replace "false" above with:
@@ -4328,7 +4541,7 @@ sc_game_scores (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         }
     }
     db->game->RestoreState ();
-    return TCL_OK;
+    return UI_Result(ti, OK, ret);
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -4338,7 +4551,7 @@ sc_game_scores (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    returned indicating whether the current game starts with
 //    a setup position.
 int
-sc_game_startBoard (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_startBoard (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc == 2) {
         return UI_Result(ti, OK, db->game->HasNonStandardStart());
@@ -4376,14 +4589,14 @@ sc_game_startBoard (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     }
     db->game->SetStartPos(&scratchPos);
     db->gameAltered = true;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_game_strip:
 //    Strips all comments, variations or annotations from a game.
 int
-sc_game_strip (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_strip (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage =
         "Usage: sc_game strip [comments|variations]";
@@ -4429,7 +4642,7 @@ sc_game_strip (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     
     db->gameAltered = true;
     language = old_lang;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -4438,7 +4651,7 @@ sc_game_strip (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    its players, site, etc; or its moves; or all its boards
 //    positions.
 int
-sc_game_summary (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_summary (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_game summary [-base <baseNum>] [-gameNumber <gameNum>] header|boards|moves";
 
@@ -4528,9 +4741,9 @@ sc_game_summary (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             eco_ToExtendedString (eco, ecoStr);
             dstr->Append ("  ", ecoStr);
         }
-        Tcl_AppendResult (ti, dstr->Data(), NULL);
+        appendResult (ti, dstr->Data(), NULL);
         delete dstr;
-        return TCL_OK;
+        return SCID_OK;
     }
 
     // Here, a list of the boards or moves is requested:
@@ -4540,7 +4753,7 @@ sc_game_summary (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         if (mode == MODE_BOARDS) {
             char boardStr[100];
             g->GetCurrentPos()->MakeLongStr (boardStr);
-            Tcl_AppendElement (ti, boardStr);
+            appendStringElement (ti, boardStr);
         } else {
             colorT toMove = g->GetCurrentPos()->GetToMove();
             uint moveCount = g->GetCurrentPos()->GetFullMoveCount();
@@ -4566,16 +4779,16 @@ sc_game_summary (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                         strAppend (temp, nagstr);
                     }
                 }
-                Tcl_AppendElement (ti, temp);
+                appendStringElement (ti, temp);
             } else {
-                Tcl_AppendElement (ti, (char *)RESULT_LONGSTR[g->GetResult()]);
+                appendStringElement (ti, (char *)RESULT_LONGSTR[g->GetResult()]);
             }
         }
         if (g->MoveForward() != OK) { break; }
     }
 
     g->RestoreState();
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -4583,7 +4796,7 @@ sc_game_summary (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //   Get, set or reload the current game tags, or share them
 //   with another game.
 int
-sc_game_tags (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_tags (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * options[] = {
         "get", "set", "reload", "share", NULL
@@ -4601,7 +4814,7 @@ sc_game_tags (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         case OPT_SHARE:  return sc_game_tags_share (cd, ti, argc, argv);
         default:         return InvalidCommand (ti, "sc_game tags", options);
     }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -4613,7 +4826,7 @@ sc_game_tags (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    For "Extra", the function returns all the extra tags as one long
 //    string, in PGN format, one tag per line.
 int
-sc_game_tags_get (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_tags_get (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
 
     static const char * options [] = {
@@ -4659,19 +4872,19 @@ sc_game_tags_get (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     switch (index) {
     case T_Event:
         s = g->GetEventStr();  if (!s) { s = "?"; }
-        Tcl_AppendResult (ti, s, NULL);
+        appendResult (ti, s, NULL);
         break;
 
     case T_Site:
         s = g->GetSiteStr();  if (!s) { s = "?"; }
-        Tcl_AppendResult (ti, s, NULL);
+        appendResult (ti, s, NULL);
         break;
 
     case T_Date:
         {
             char dateStr[20];
             date_DecodeToString (g->GetDate(), dateStr);
-            Tcl_AppendResult (ti, dateStr, NULL);
+            appendResult (ti, dateStr, NULL);
         }
         break;
 
@@ -4686,17 +4899,17 @@ sc_game_tags_get (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     case T_Round:
         s = g->GetRoundStr();  if (!s) { s = "?"; }
-        Tcl_AppendResult (ti, s, NULL);
+        appendResult (ti, s, NULL);
         break;
 
     case T_White:
         s = g->GetWhiteStr();  if (!s) { s = "?"; }
-        Tcl_AppendResult (ti, s, NULL);
+        appendResult (ti, s, NULL);
         break;
 
     case T_Black:
         s = g->GetBlackStr();  if (!s) { s = "?"; }
-        Tcl_AppendResult (ti, s, NULL);
+        appendResult (ti, s, NULL);
         break;
 
     case T_Result:
@@ -4718,7 +4931,7 @@ sc_game_tags_get (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         {
             ecoStringT ecoStr;
             eco_ToExtendedString (g->GetEco(), ecoStr);
-            Tcl_AppendResult (ti, ecoStr, NULL);
+            appendResult (ti, ecoStr, NULL);
             break;
         }
 
@@ -4726,7 +4939,7 @@ sc_game_tags_get (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         {
             char dateStr[20];
             date_DecodeToString (g->GetEventDate(), dateStr);
-            Tcl_AppendResult (ti, dateStr, NULL);
+            appendResult (ti, dateStr, NULL);
         }
         break;
 
@@ -4744,7 +4957,7 @@ sc_game_tags_get (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             uint numTags = g->GetNumExtraTags();
             tagT * ptagList = g->GetExtraTags();
             while (numTags > 0) {
-                Tcl_AppendResult (ti, ptagList->tag, " \"", ptagList->value,
+                appendResult (ti, ptagList->tag, " \"", ptagList->value,
                                   "\"\n", NULL);
                 numTags--;
                 ptagList++;
@@ -4756,7 +4969,7 @@ sc_game_tags_get (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_game tags get", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -4768,7 +4981,7 @@ sc_game_tags_get (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Last arg is the non-standard tags, a string of lines in the format:
 //        [TagName "TagValue"]
 int
-sc_game_tags_set (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_tags_set (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * options[] = {
         "-event", "-site", "-date", "-round", "-white", "-black", "-result",
@@ -4817,13 +5030,14 @@ sc_game_tags_set (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                 db->game->SetEventDate (date_EncodeFromString(value));
                 break;
             case T_EXTRA:
+#ifndef NODEJS
                 {
                     // Add all the nonstandard tags:
                     db->game->ClearExtraTags ();
                     int largc;
                     const char ** largv;
                     if (Tcl_SplitList (ti, value, &largc,
-                                       (CONST84 char ***) &largv) != TCL_OK) {
+                                       (CONST84 char ***) &largv) != SCID_OK) {
                         // Error from Tcl_SplitList!
                         return errorResult (ti, "Error parsing extra tags.");
                     }
@@ -4843,13 +5057,16 @@ sc_game_tags_set (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                     }
                     Tcl_Free ((char *) largv);
                 }
+#else
+                printf("STUB:sc_game_tags_set: T_EXTRA\n");
+#endif
                 break;
             default:
                 return InvalidCommand (ti, "sc_game tags set", options);
         }
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -4858,12 +5075,12 @@ sc_game_tags_set (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Useful when a name that may occur in the current game has been
 //    edited.
 int
-sc_game_tags_reload (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_tags_reload (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
-    if (!db->inUse  ||   db->gameNumber < 0) { return TCL_OK; }
+    if (!db->inUse  ||   db->gameNumber < 0) { return SCID_OK; }
     const IndexEntry* ie = db->getIndexEntry(db->gameNumber);
     db->game->LoadStandardTags (ie, db->getNameBase());
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -4882,7 +5099,7 @@ sc_game_tags_reload (ClientData cd, Tcl_Interp * ti, int argc, const char ** arg
 //    and the new value. If the parameter is "update", the changes
 //    will be made and the empty string is returned.
 int
-sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_game_tags_share (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage =
         "Usage: sc_game tags share [check|update] <gameNumber1> <gameNumber2>";
@@ -4898,14 +5115,14 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     // Get the two game numbers, which should be different and non-zero.
     uint gn1 = strGetUnsigned (argv[4]);
     uint gn2 = strGetUnsigned (argv[5]);
-    if (gn1 == 0) { return TCL_OK; }
-    if (gn2 == 0) { return TCL_OK; }
-    if (gn1 == gn2) { return TCL_OK; }
-    if (gn1 > db->numGames()) { return TCL_OK; }
-    if (gn2 > db->numGames()) { return TCL_OK; }
+    if (gn1 == 0) { return SCID_OK; }
+    if (gn2 == 0) { return SCID_OK; }
+    if (gn1 == gn2) { return SCID_OK; }
+    if (gn1 > db->numGames()) { return SCID_OK; }
+    if (gn2 > db->numGames()) { return SCID_OK; }
 
     // Do nothing if the base is not writable:
-    if (!db->inUse  ||  db->isReadOnly()) { return TCL_OK; }
+    if (!db->inUse  ||  db->isReadOnly()) { return SCID_OK; }
 
     // Make a local copy of each index entry:
     IndexEntry ie1 = *(db->getIndexEntry(gn1 - 1));
@@ -4924,6 +5141,8 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     strTrimDate (dateStr2);
     if (date1 == 0) { *dateStr1 = 0; }
     if (date2 == 0) { *dateStr2 = 0; }
+
+    UI_List res(ti);
     // Check if one date is a prefix of the other:
     if (!strEqual (dateStr1, dateStr2)  &&  strIsPrefix (dateStr1, dateStr2)) {
         // Copy date grom game 2 to game 1:
@@ -4931,10 +5150,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie1.SetDate (date2);
             updated1 = true;
         } else {
-            appendUintElement (ti, gn1);
-            Tcl_AppendElement (ti, "Date");
-            Tcl_AppendElement (ti, dateStr1);
-            Tcl_AppendElement (ti, dateStr2);
+            res.push_back(gn1);
+            res.push_back("Date");
+            res.push_back(dateStr1);
+            res.push_back(dateStr2);
         }
     }
     if (!strEqual (dateStr1, dateStr2)  &&  strIsPrefix (dateStr2, dateStr1)) {
@@ -4943,10 +5162,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie2.SetDate (date1);
             updated2 = true;
         } else {
-            appendUintElement (ti, gn2);
-            Tcl_AppendElement (ti, "Date");
-            Tcl_AppendElement (ti, dateStr2);
-            Tcl_AppendElement (ti, dateStr1);
+            res.push_back(gn2);
+            res.push_back("Date");
+            res.push_back(dateStr2);
+            res.push_back(dateStr1);
         }
     }
 
@@ -4963,10 +5182,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie1.SetEvent (event2);
             updated1 = true;
         } else {
-            appendUintElement (ti, gn1);
-            Tcl_AppendElement (ti, "Event");
-            Tcl_AppendElement (ti, eventStr1);
-            Tcl_AppendElement (ti, eventStr2);
+            res.push_back(gn1);
+            res.push_back("Event");
+            res.push_back(eventStr1);
+            res.push_back(eventStr2);
         }
     }
     if (event2empty  && !event1empty) {
@@ -4975,10 +5194,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie2.SetEvent (event1);
             updated2 = true;
         } else {
-            appendUintElement (ti, gn2);
-            Tcl_AppendElement (ti, "Event");
-            Tcl_AppendElement (ti, eventStr2);
-            Tcl_AppendElement (ti, eventStr1);
+            res.push_back(gn2);
+            res.push_back("Event");
+            res.push_back(eventStr2);
+            res.push_back(eventStr1);
         }
     }
 
@@ -4995,10 +5214,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie1.SetRound (round2);
             updated1 = true;
         } else {
-            appendUintElement (ti, gn1);
-            Tcl_AppendElement (ti, "Round");
-            Tcl_AppendElement (ti, roundStr1);
-            Tcl_AppendElement (ti, roundStr2);
+            res.push_back(gn1);
+            res.push_back("Round");
+            res.push_back(roundStr1);
+            res.push_back(roundStr2);
         }
     }
     if (round2empty  && !round1empty) {
@@ -5007,10 +5226,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie2.SetRound (round1);
             updated2 = true;
         } else {
-            appendUintElement (ti, gn2);
-            Tcl_AppendElement (ti, "Round");
-            Tcl_AppendElement (ti, roundStr2);
-            Tcl_AppendElement (ti, roundStr1);
+            res.push_back(gn2);
+            res.push_back("Round");
+            res.push_back(roundStr2);
+            res.push_back(roundStr1);
         }
     }
 
@@ -5025,10 +5244,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie1.SetWhiteElo (welo2);
             updated1 = true;
         } else {
-            appendUintElement (ti, gn1);
-            Tcl_AppendElement (ti, "WhiteElo");
-            appendUintElement (ti, welo1);
-            appendUintElement (ti, welo2);
+            res.push_back(gn1);
+            res.push_back("WhiteElo");
+            res.push_back(welo1);
+            res.push_back(welo2);
         }
     }
     if (welo2 == 0  &&  welo1 != 0) {
@@ -5037,10 +5256,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie2.SetWhiteElo (welo1);
             updated2 = true;
         } else {
-            appendUintElement (ti, gn2);
-            Tcl_AppendElement (ti, "WhiteElo");
-            appendUintElement (ti, welo2);
-            appendUintElement (ti, welo1);
+            res.push_back(gn2);
+            res.push_back("WhiteElo");
+            res.push_back(welo2);
+            res.push_back(welo1);
         }
     }
     if (belo1 == 0  &&  belo2 != 0) {
@@ -5049,10 +5268,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie1.SetBlackElo (belo2);
             updated1 = true;
         } else {
-            appendUintElement (ti, gn1);
-            Tcl_AppendElement (ti, "BlackElo");
-            appendUintElement (ti, belo1);
-            appendUintElement (ti, belo2);
+            res.push_back(gn1);
+            res.push_back("BlackElo");
+            res.push_back(belo1);
+            res.push_back(belo2);
         }
     }
     if (belo2 == 0  &&  belo1 != 0) {
@@ -5061,10 +5280,10 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             ie2.SetBlackElo (belo1);
             updated2 = true;
         } else {
-            appendUintElement (ti, gn2);
-            Tcl_AppendElement (ti, "BlackElo");
-            appendUintElement (ti, belo2);
-            appendUintElement (ti, belo1);
+            res.push_back(gn2);
+            res.push_back("BlackElo");
+            res.push_back(belo2);
+            res.push_back(belo1);
         }
     }
 
@@ -5080,7 +5299,7 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
              db->clearCaches();
         }
     }
-    return TCL_OK;
+    return UI_Result(ti, OK, res);
 }
 
 //////////////////////////////////////////////////////////////////////
@@ -5090,7 +5309,7 @@ sc_game_tags_share (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
 // sc_info:
 //    General Scid Information commands.
 int
-sc_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_info (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "clipbase", "decimal", "fsize", "gzip",
@@ -5140,7 +5359,7 @@ sc_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         {
             uint i = 0;
             while (ratingTypeNames[i] != NULL) {
-                Tcl_AppendElement (ti, (char *) ratingTypeNames[i]);
+                appendStringElement (ti, (char *) ratingTypeNames[i]);
                 i++;
             }
         }
@@ -5188,7 +5407,7 @@ sc_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_info", options);
     };
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -5199,7 +5418,7 @@ sc_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    To distinguish estimates from correct sizes, an estimate is
 //    returned as a negative number.
 int
-sc_info_fsize (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_info_fsize (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_info fsize <filename>");
@@ -5299,7 +5518,7 @@ sc_info_fsize (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 // sc_info limit:
 //    Limits that Scid imposes.
 int
-sc_info_limit (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_info_limit (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "elo", "games", "nags", "year", "bases", NULL
@@ -5345,7 +5564,7 @@ sc_info_limit (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Returns a Scid file suffix for a database file type.
 //    The suffix is returned with the leading dot.
 int
-sc_info_suffix (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_info_suffix (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "game", "index", "name", NULL
@@ -5375,7 +5594,7 @@ sc_info_suffix (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //   Set up a tablebase directory, or check if a certain
 //   tablebase is available.
 int
-sc_info_tb (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_info_tb (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage =
         "Usage: sc_info tb [<directory>|available <material>|cache <size-kb>]";
@@ -5418,7 +5637,7 @@ sc_info_tb (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         // at the next tablebase initialisation.
         uint cachesize = strGetUnsigned (argv[3]);
         scid_TB_SetCacheSize (cachesize * 1024);
-        return TCL_OK;
+        return SCID_OK;
     } else {
         return errorResult (ti, usage);
     }
@@ -5428,7 +5647,7 @@ sc_info_tb (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //  MOVE functions
 
 int
-sc_move (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_move (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "add", "addSan", "addUCI", "back", "end", "forward",
@@ -5478,7 +5697,7 @@ sc_move (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                 v.push_back(strGetInteger(argv[i]));
             }
             db->game->MoveTo(v);
-            return TCL_OK;
+            return SCID_OK;
         }
         return errorResult (ti, "Usage: sc_move ply <plynumber>");
 
@@ -5490,14 +5709,14 @@ sc_move (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_move", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_move_add: takes a move specified by three parameters
 //      (square square promo) and adds it to the game.
 int
-sc_move_add (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_move_add (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
 
     if (argc != 5) {
@@ -5527,7 +5746,7 @@ sc_move_add (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         err = db->game->AddMove (&sm, NULL);
         if (err == OK) {
             db->gameAltered = true;
-            return TCL_OK;
+            return SCID_OK;
         }
     }
     return errorResult (ti, "Error adding move.");
@@ -5540,12 +5759,12 @@ sc_move_add (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    list elements, or a mixture of both. Move numbers are ignored
 //    but variations/comments/annotations are parsed and added.
 int
-sc_move_addSan (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_move_addSan (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char ** argPtr = &(argv[2]);
     int argsLeft = argc - 2;
 
-    if (argc < 3) { return TCL_OK; }
+    if (argc < 3) { return SCID_OK; }
 
     PgnParser parser;
     char buf [1000];
@@ -5555,8 +5774,8 @@ sc_move_addSan (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         parser.SetResultWarnings (false);
         errorT err = parser.ParseMoves (db->game, buf, 1000);
         if (err != OK  ||  parser.ErrorCount() > 0) {
-            Tcl_AppendResult (ti, "Error reading move(s): ", *argPtr, NULL);
-            return TCL_ERROR;
+            appendResult (ti, "Error reading move(s): ", *argPtr, NULL);
+            return SCID_ERROR;
         }
         db->gameAltered = true;
         argPtr++;
@@ -5564,7 +5783,7 @@ sc_move_addSan (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
 
     // If we reach here, all moves were successfully added:
-    return TCL_OK;
+    return SCID_OK;
 }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_move_addUCI:
@@ -5572,10 +5791,10 @@ sc_move_addSan (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    to the game. The result is translated.
 //    In case of an error, return the moves that could be converted.
 int
-sc_move_addUCI (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv) 
+sc_move_addUCI (ClientData cd, UI_handle_t ti, int argc, const char ** argv) 
 {
     char s[8], tmp[10];
-    if (argc < 3) { return TCL_OK; }
+    if (argc < 3) { return SCID_OK; }
     char * ptr = (char *) argv[2];
 
     while (*ptr != 0) {
@@ -5603,25 +5822,25 @@ sc_move_addUCI (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             db->gameAltered = true;
             db->game->GetPrevSAN (tmp);
             transPieces(tmp);
-            Tcl_AppendResult (ti, tmp, " ", NULL);
+            appendResult (ti, tmp, " ", NULL);
         } else {
-            //Tcl_AppendResult (ti, "Error reading move(s): ", ptr, NULL);
+            //appendResult (ti, "Error reading move(s): ", ptr, NULL);
             break;
         }
       } else {
-        //Tcl_AppendResult (ti, "Error reading move(s): ", ptr, NULL);
+        //appendResult (ti, "Error reading move(s): ", ptr, NULL);
         break;
       }
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_move_back:
 //    Moves back a specified number of moves (default = 1 move).
 int
-sc_move_back (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_move_back (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     int numMovesTakenBack = 0;
     int count = 1;
@@ -5636,14 +5855,14 @@ sc_move_back (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
 
     setUintResult (ti, numMovesTakenBack);
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_move_forward:
 //    Moves forward a specified number of moves (default = 1 move).
 int
-sc_move_forward (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_move_forward (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     int numMovesMade = 0;
     int count = 1;
@@ -5659,7 +5878,7 @@ sc_move_forward (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
 
     setUintResult (ti, numMovesMade);
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -5668,7 +5887,7 @@ sc_move_forward (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    the specified place in the PGN output (given as a byte count
 //    from the start of the output).
 int
-sc_move_pgn (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_move_pgn (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_move pgn <offset>");
@@ -5676,7 +5895,7 @@ sc_move_pgn (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     uint offset = strGetUnsigned (argv[2]);
     db->game->MoveToLocationInPGN (offset);
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -5685,7 +5904,7 @@ sc_move_pgn (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //  POSITION functions
 
 int
-sc_pos (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "addNag", "analyze", "bestSquare", "board", "clearNags",
@@ -5720,7 +5939,7 @@ sc_pos (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     case POS_BOARD:
         db->game->GetCurrentPos()->MakeLongStr (boardStr);
-        Tcl_AppendResult (ti, boardStr, NULL);
+        appendResult (ti, boardStr, NULL);
         break;
 
     case POS_CLEARNAGS:
@@ -5730,14 +5949,14 @@ sc_pos (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     case POS_FEN:
         db->game->GetCurrentPos()->PrintFEN (boardStr, FEN_ALL_FIELDS);
-        Tcl_AppendResult (ti, boardStr, NULL);
+        appendResult (ti, boardStr, NULL);
         break;
 
     case POS_GETCOMMENT:
         const char * tempStr;
         tempStr = db->game->GetMoveComment();
         if (tempStr) {
-            Tcl_AppendResult (ti, tempStr, NULL);
+            appendResult (ti, tempStr, NULL);
         }
         break;
 
@@ -5803,14 +6022,14 @@ sc_pos (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             if (argc > 2  &&  strIsPrefix (argv[2], "flip")) { flip = true; }
             DString * dstr = new DString;
             db->game->GetCurrentPos()->DumpLatexBoard (dstr, flip);
-            Tcl_AppendResult (ti, dstr->Data(), NULL);
+            appendResult (ti, dstr->Data(), NULL);
             delete dstr;
         }
         break;
 
     case LOCATION: {
         std::vector<int> v = db->game->GetCurrentLocation();
-        UI_List res(v.size());
+        UI_List res(ti);
         for (size_t i=0, n=v.size(); i < n; i++) res.push_back(v[i]);
         return UI_Result(ti, OK, res);
     }
@@ -5833,32 +6052,33 @@ sc_pos (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         }
         mlist.Sort();
         char tmp[16];
-        Tcl_Obj** res = new Tcl_Obj* [mlist.Size()];
+        UI_List res(ti);
         for (uint i = 0; i < mlist.Size(); i++) {
             pos->MakeSANString(mlist.Get(i), tmp, SAN_CHECKTEST);
-            res[i] = Tcl_NewStringObj(tmp, -1);
+            res.push_back(tmp);
         }
-        Tcl_SetObjResult(ti, Tcl_NewListObj(mlist.Size(), res));
-        delete [] res;
-        return TCL_OK;
+        return UI_Result(ti, OK, res);
     }
 
     case POS_ATTACKS:
         {
             Position pos(*db->game->GetCurrentPos());
+            UI_List res(ti);
+
             for (colorT c = WHITE; c <= BLACK; c++) {
                 for (uint i = 0; i < pos.GetCount(c); i++) {
                     squareT sq = pos.GetList(c)[i];
                     pos.SetToMove(color_Flip(c));
                     int att = pos.TreeCalcAttacks(color_Flip(c), sq);
                     if (att) {
-                      appendUintElement(ti, sq);
-                      if (att > 1) Tcl_AppendElement(ti, "green");
-                      else if (att > 0) Tcl_AppendElement(ti, "yellow");
-                      else Tcl_AppendElement(ti, "red");
+                      res.push_back(sq);
+                      if (att > 1) res.push_back("green");
+                      else if (att > 0) res.push_back("yellow");
+                      else res.push_back("red");
                     }
                 }
             }
+            return UI_Result(ti, OK, res);
         }
         break;
 
@@ -5866,7 +6086,7 @@ sc_pos (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_pos", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -5874,7 +6094,7 @@ sc_pos (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 // sc_pos_addNag:
 //    Adds a NAG (annotation symbol) for the current move.
 int
-sc_pos_addNag (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_addNag (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_pos addNag <nagvalue>");
@@ -5892,7 +6112,7 @@ sc_pos_addNag (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 		}
 		db->gameAltered = true;
 	}
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -5904,7 +6124,7 @@ sc_pos_addNag (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    (from the perspective of the side to move) and the best move.
 //    If there are no legal moves, the second element is the empty string.
 int
-sc_pos_analyze (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_analyze (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_pos analyze [<option> <value> ...]";
 
@@ -5966,7 +6186,7 @@ sc_pos_analyze (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     if (mlist.Size() > 0) {
         pos->MakeSANString (mlist.Get(0), moveStr, SAN_MATETEST);
     }
-    UI_List res(2);
+    UI_List res(ti);
     res.push_back(score);
     res.push_back(moveStr);
     return UI_Result(ti, OK, res);
@@ -5979,7 +6199,7 @@ sc_pos_analyze (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    a move. Used for smart move completion.
 //    Returns -1 if no legal moves go to or from the square.
 int
-sc_pos_bestSquare (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_bestSquare (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_pos bestSquare <square>");
@@ -6063,14 +6283,14 @@ sc_pos_bestSquare (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     if (sm->from == sq) { bestSq = sm->to; }
     setUintResult (ti, bestSq);
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_pos_getNags:
 //    Get the NAGs for the current move.
 int
-sc_pos_getNags (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_getNags (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     byte * nag = db->game->GetNags();
     if (nag[0] == 0) {
@@ -6079,18 +6299,18 @@ sc_pos_getNags (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     while (*nag) {
         char temp[20];
         game_printNag (*nag, temp, true, PGN_FORMAT_Plain);
-        Tcl_AppendResult (ti, temp, " ", NULL);
+        appendResult (ti, temp, " ", NULL);
         nag++;
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_pos_hash:
 //   Returns the 32-bit hash value of the current position.
 int
-sc_pos_hash (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_hash (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_pos hash [full|pawn]";
     bool pawnHashOnly = false;
@@ -6119,7 +6339,7 @@ sc_pos_hash (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    a "bitmaps2" directory.
 //    The directory can be overridden with the "-path" command.
 int
-sc_pos_html (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_html (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_pos html [-flip <boolean>] [-path <path>] [<style:0|1>]";
     uint style = htmlDiagStyle;
@@ -6142,9 +6362,9 @@ sc_pos_html (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     DString * dstr = new DString;
     db->game->GetCurrentPos()->DumpHtmlBoard (dstr, style, path, flip);
-    Tcl_AppendResult (ti, dstr->Data(), NULL);
+    appendResult (ti, dstr->Data(), NULL);
     delete dstr;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -6154,7 +6374,7 @@ sc_pos_html (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //   Valid arguments are: start, end, vstart and vend (or unique
 //   abbreviations thereof).
 int
-sc_pos_isAt (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_isAt (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "start", "end", "vstart", "vend", NULL
@@ -6181,7 +6401,7 @@ sc_pos_isAt (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     default:
         return errorResult (ti, "Usage: sc_pos isAt start|end|vstart|vend");
     }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -6189,7 +6409,7 @@ sc_pos_isAt (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Takes two squares (from and to, in either order) and
 //    returns true if they represent a pawn promotion move.
 int
-sc_pos_isPromo (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_isPromo (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 4) {
         return errorResult (ti, "Usage: sc_move isPromo <square> <square>");
@@ -6210,7 +6430,7 @@ sc_pos_isPromo (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 // sc_pos_isLegal: returns true if the move between the two provided
 //    squares (either could be the from square) is legal.
 int
-sc_pos_isLegal (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_isLegal (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 4) {
         return errorResult (ti, "Usage: sc_pos isLegal <square> <square>");
@@ -6241,7 +6461,7 @@ sc_pos_isLegal (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //     castling respectively, so that no move is a prefix of
 //     any other move.
 int
-sc_pos_matchMoves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_matchMoves (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3  &&  argc != 4) {
         return errorResult (ti, "Usage: sc_pos matchMoves <movetext-prefix>");
@@ -6259,7 +6479,7 @@ sc_pos_matchMoves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         if (strEqual (str, "O-O")) { strCopy (str, "OK"); }
         if (strEqual (str, "O-O-O")) { strCopy (str, "OQ"); }
         if (strIsPrefix (prefix, str)) {
-            Tcl_AppendElement (ti, str);
+            appendStringElement (ti, str);
         }
     }
 
@@ -6272,7 +6492,7 @@ sc_pos_matchMoves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         for (uint i=0; i < sanList.num; i++) {
             strCopyExclude (str, sanList.list[i], "x=+#");
             if (strIsPrefix (newPrefix, str)) {
-                Tcl_AppendElement (ti, str);
+                appendStringElement (ti, str);
             }
         }
 #ifdef WINCE
@@ -6300,19 +6520,19 @@ sc_pos_matchMoves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                 str[5] = 0;
             }
             if (strIsPrefix (prefix, str)) {
-                Tcl_AppendElement (ti, str);
+                appendStringElement (ti, str);
             }
         }
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_pos_moves: Return the list of legal moves in SAN notation
 //
 int
-sc_pos_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_moves (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 2) {
         return errorResult (ti, "Usage: sc_pos moves");
@@ -6322,9 +6542,9 @@ sc_pos_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     p->CalcSANStrings (&sanList, SAN_NO_CHECKTEST);
 
     for (uint i=0; i < sanList.num; i++) {
-            Tcl_AppendElement (ti, sanList.list[i]);
+            appendStringElement (ti, sanList.list[i]);
     }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -6334,7 +6554,7 @@ sc_pos_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    returns the board position corresponding to the
 //    last position reached in the game.
 int
-sc_pos_pgnBoard (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_pgnBoard (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_pos pgnBoard <pgn-text>");
@@ -6368,9 +6588,9 @@ sc_pos_pgnBoard (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     char boardStr [200];
     g->GetCurrentPos()->MakeLongStr (boardStr);
 
-    Tcl_AppendResult (ti, boardStr, NULL);
+    appendResult (ti, boardStr, NULL);
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -6378,7 +6598,7 @@ sc_pos_pgnBoard (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 // sc_pos_probe:
 //    Probes tablebases for the current move.
 int
-sc_pos_probe (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_probe (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_pos probe [score|report|optimal|board <sq>]";
     static const char * options[] = {
@@ -6397,7 +6617,7 @@ sc_pos_probe (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         // Tablebase report:
         DString * tbReport = new DString;
         if (probe_tablebase (ti, PROBE_REPORT, tbReport)) {
-            Tcl_AppendResult (ti, tbReport->Data(), NULL);
+            appendResult (ti, tbReport->Data(), NULL);
         }
         delete tbReport;
     } else if (option == OPT_OPTIMAL) {
@@ -6406,7 +6626,7 @@ sc_pos_probe (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         // Optimal moves from tablebase:
         DString * tbOptimal = new DString;
         if (probe_tablebase (ti, PROBE_OPTIMAL, tbOptimal)) {
-            Tcl_AppendResult (ti, tbOptimal->Data(), NULL);
+            appendResult (ti, tbOptimal->Data(), NULL);
         }
         delete tbOptimal;
     } else if (option == OPT_SCORE) {
@@ -6419,7 +6639,7 @@ sc_pos_probe (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     } else {
         return errorResult (ti, usage);
     }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -6427,7 +6647,7 @@ sc_pos_probe (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    Probes tablebases for the current position with one piece
 //    (specified by its square) relocated to each empty board square.
 int
-sc_pos_probe_board (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_probe_board (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_pos probe board <square>";
 
@@ -6446,7 +6666,7 @@ sc_pos_probe_board (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
 
     Position pos = *(db->game->GetCurrentPos());
     const pieceT * board = pos.GetBoard();
-    if (board[sq] == EMPTY) { return TCL_OK; }
+    if (board[sq] == EMPTY) { return SCID_OK; }
 
     for (squareT toSq = A1; toSq <= H8; toSq++) {
         const char * result = "";
@@ -6467,16 +6687,16 @@ sc_pos_probe_board (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
             }
             pos.RelocatePiece (toSq, sq);
         }
-        Tcl_AppendResult (ti, result, NULL);
+        appendResult (ti, result, NULL);
     }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_pos_setComment:
 //    Set the comment for the current move.
 int
-sc_pos_setComment (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_pos_setComment (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_pos setComment <comment-text>");
@@ -6497,7 +6717,7 @@ sc_pos_setComment (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             db->gameAltered = true;
         }
     }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -6510,7 +6730,7 @@ UI_res_t sc_name_spellcheck (UI_handle_t ti, scidBaseT& dbase, const SpellChecke
 
 
 int
-sc_name (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_name (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "correct", "edit", "info", "match", "plist",
@@ -6575,14 +6795,14 @@ sc_name (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_name", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_name_correct:
 //    Corrects specified names in the database.
 int
-sc_name_correct (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_name_correct (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     nameT nt = NAME_INVALID;
     if (argc == 4) { nt = NameBase::NameTypeFromString (argv[2]); }
@@ -6744,7 +6964,7 @@ sc_name_correct (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     errorT err = db->clearCaches();
     if (err != OK) return UI_Result(ti, ERROR_FileWrite);
 
-    UI_List res(4);
+    UI_List res(ti);
     res.push_back(correctionCount);
     res.push_back(errorCount);
     res.push_back(instanceCount);
@@ -6763,7 +6983,7 @@ sc_name_correct (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    3rd arg: name to edit.
 //    4th arg: new name -- it might already exist in the namebase.
 int
-sc_name_edit (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_name_edit (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_name edit <type> <oldName> <newName>";
     const char * options[] = {
@@ -6826,9 +7046,9 @@ sc_name_edit (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     idNumberT oldID = 0;
     if (option != OPT_DATE  &&  option != OPT_EVENTDATE) {
         if (db->getNameBase()->FindExactName (nt, oldName, &oldID) != OK) {
-            Tcl_AppendResult (ti, "Sorry, the ", NAME_TYPE_STRING[nt],
+            appendResult (ti, "Sorry, the ", NAME_TYPE_STRING[nt],
                               " name \"", oldName, "\" does not exist.", NULL);
-            return TCL_ERROR;
+            return SCID_ERROR;
         }
     }
 
@@ -6958,8 +7178,8 @@ sc_name_edit (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         sprintf (temp, "Changed %u of \"%s\" to \"%s\".",
                  numChanges, oldName, newName);
     }
-    Tcl_AppendResult (ti, temp, NULL);
-    return TCL_OK;
+    appendResult (ti, temp, NULL);
+    return SCID_OK;
 }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_name_retrievename:
@@ -6980,7 +7200,7 @@ UI_res_t sc_name_retrievename (UI_handle_t ti, const SpellChecker& sp, int argc,
 //    success rate with white and black, common openings by ECO code,
 //    and Elo rating history.
 int
-sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_name_info (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static char * lastPlayerName = NULL;
     const char * usageStr = "Usage: sc_name info [-ratings|-htext] <player>";
@@ -7071,10 +7291,10 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     idNumberT id = 0;
     if (db->getNameBase()->FindExactName (NAME_PLAYER, playerName, &id) != OK) {
         if (! ratingsOnly) {
-            Tcl_AppendResult (ti, "The name \"", playerName,
+            appendResult (ti, "The name \"", playerName,
                               "\" does not exist in this database.", NULL);
         }
-        return TCL_OK;
+        return SCID_OK;
     }
 
     // Try to find opponent in this database:
@@ -7249,12 +7469,12 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     SpellChecker* spChecker = spellChk;
 
     if (ratingsOnly) { goto doRatings; }
-    Tcl_AppendResult (ti, startBold, playerName, endBold, newline, NULL);
+    appendResult (ti, startBold, playerName, endBold, newline, NULL);
 
     // Show title, country, etc if listed in player spellcheck file:
     if (spChecker != NULL) {
         const PlayerInfo* pInfo = spChecker->getPlayerInfo(playerName);
-        if (pInfo) { Tcl_AppendResult (ti, "  ", pInfo->GetComment(), newline, NULL); }
+        if (pInfo) { appendResult (ti, "  ", pInfo->GetComment(), newline, NULL); }
     }
     sprintf (temp, "  %s%u%s %s (%s: %u)",
              htextOutput ? "<red><run sc_name info -faA {}; ::windows::stats::Refresh>" : "",
@@ -7264,18 +7484,18 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
               translate (ti, "game") : translate (ti, "games")),
              translate (ti, "Filter"),
              totalcount[STATS_FILTER]);
-    Tcl_AppendResult (ti, temp, NULL);
+    appendResult (ti, temp, NULL);
     if (firstGameDate != ZERO_DATE) {
         date_DecodeToString (firstGameDate, temp);
         strTrimDate (temp);
-        Tcl_AppendResult (ti, ", ", temp, NULL);
+        appendResult (ti, ", ", temp, NULL);
     }
     if (lastGameDate > firstGameDate) {
         date_DecodeToString (lastGameDate, temp);
         strTrimDate (temp);
-        Tcl_AppendResult (ti, "--", temp, NULL);
+        appendResult (ti, "--", temp, NULL);
     }
-    Tcl_AppendResult (ti, newline, NULL);
+    appendResult (ti, newline, NULL);
 
     // Print biography if applicable:
     if (spChecker != NULL) {
@@ -7284,11 +7504,11 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         if (pInfo != 0) {
             for (size_t i=0, n=bio.size(); i < n; i++) {
                 if (i == 0) {
-                    Tcl_AppendResult (ti, newline, startHeading,
+                    appendResult (ti, newline, startHeading,
                               translate (ti, "Biography"), ":",
                               endHeading, newline, NULL);
                 }
-                Tcl_AppendResult (ti, "  ", bio[i], newline, NULL);
+                appendResult (ti, "  ", bio[i], newline, NULL);
             }
         }
     }
@@ -7296,7 +7516,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     strCopy (temp, translate (ti, "PInfoAll"));
     if (! htextOutput) { strTrimMarkup (temp); }
-    Tcl_AppendResult (ti, newline, startHeading, temp, ":",
+    appendResult (ti, newline, startHeading, temp, ":",
                       endHeading, newline, NULL);
 
     score = percent = 0;
@@ -7324,7 +7544,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
              htextOutput ? "<red><run sc_name info -fa {}; ::windows::stats::Refresh>" : "",
              whitecount[STATS_ALL],
              htextOutput ? "</run></red></tt>" : "");
-    Tcl_AppendResult (ti, temp, newline, NULL);
+    appendResult (ti, temp, newline, NULL);
 
     score = percent = 0;
     if (blackcount[STATS_ALL] > 0) {
@@ -7351,7 +7571,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
              htextOutput ? "<red><run sc_name info -fA {}; ::windows::stats::Refresh>" : "",
              blackcount[STATS_ALL],
              htextOutput ? "</run></red></tt>" : "");
-    Tcl_AppendResult (ti, temp, newline, NULL);
+    appendResult (ti, temp, newline, NULL);
 
     score = percent = 0;
     if (totalcount[STATS_ALL] > 0) {
@@ -7378,13 +7598,13 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
              htextOutput ? "<red><run sc_name info -faA {}; ::windows::stats::Refresh>" : "",
              totalcount[STATS_ALL],
              htextOutput ? "</run></red></tt>" : "");
-    Tcl_AppendResult (ti, temp, newline, NULL);
+    appendResult (ti, temp, newline, NULL);
 
     // Now print stats for games in the filter:
 
     strCopy (temp, translate (ti, "PInfoFilter"));
     if (! htextOutput) { strTrimMarkup (temp); }
-    Tcl_AppendResult (ti, newline, startHeading, temp, ":",
+    appendResult (ti, newline, startHeading, temp, ":",
                       endHeading, newline, NULL);
     score = percent = 0;
     if (whitecount[STATS_FILTER] > 0) {
@@ -7404,7 +7624,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
              score / 2, decimalPointChar, score % 2 ? '5' : '0',
              "", whitecount[STATS_FILTER],
              htextOutput ? "</tt>" : "");
-    Tcl_AppendResult (ti, temp, newline, NULL);
+    appendResult (ti, temp, newline, NULL);
 
     score = percent = 0;
     if (blackcount[STATS_FILTER] > 0) {
@@ -7424,7 +7644,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
              score / 2, decimalPointChar, score % 2 ? '5' : '0',
              "", blackcount[STATS_FILTER],
              htextOutput ? "</tt>" : "");
-    Tcl_AppendResult (ti, temp, newline, NULL);
+    appendResult (ti, temp, newline, NULL);
 
     score = percent = 0;
     if (totalcount[STATS_FILTER] > 0) {
@@ -7444,12 +7664,12 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
              score / 2, decimalPointChar, score % 2 ? '5' : '0',
              "", totalcount[STATS_FILTER],
              htextOutput ? "</tt>" : "");
-    Tcl_AppendResult (ti, temp, newline, NULL);
+    appendResult (ti, temp, newline, NULL);
 
     // Now print stats for games against the current opponent:
 
     if (opponent != NULL) {
-        Tcl_AppendResult (ti, newline, startHeading,
+        appendResult (ti, newline, startHeading,
                           translate (ti, "PInfoAgainst"), " ",
                           startBold, opponent, endBold, ":",
                           endHeading, newline, NULL);
@@ -7479,7 +7699,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                  htextOutput ? "<red><run sc_name info -oa {}; ::windows::stats::Refresh>" : "",
                  whitecount[STATS_OPP],
                  htextOutput ? "</run></red></tt>" : "");
-        Tcl_AppendResult (ti, temp, newline, NULL);
+        appendResult (ti, temp, newline, NULL);
 
         score = percent = 0;
         if (blackcount[STATS_OPP] > 0) {
@@ -7506,7 +7726,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                  htextOutput ? "<red><run sc_name info -oA {}; ::windows::stats::Refresh>" : "",
                  blackcount[STATS_OPP],
                  htextOutput ? "</run></red></tt>" : "");
-        Tcl_AppendResult (ti, temp, newline, NULL);
+        appendResult (ti, temp, newline, NULL);
 
         score = percent = 0;
         if (totalcount[STATS_OPP] > 0) {
@@ -7533,7 +7753,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                  htextOutput ? "<red><run sc_name info -oaA {}; ::windows::stats::Refresh>" : "",
                  totalcount[STATS_OPP],
                  htextOutput ? "</run></red></tt>" : "");
-        Tcl_AppendResult (ti, temp, newline, NULL);
+        appendResult (ti, temp, newline, NULL);
     }
 
     // Now print common openings played:
@@ -7552,28 +7772,28 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                 if (count == 0) {
                     const char * s = (color == WHITE ? "PInfoMostWhite" :
                                       "PInfoMostBlack");
-                    Tcl_AppendResult (ti, newline, startHeading,
+                    appendResult (ti, newline, startHeading,
                                       translate (ti, s), ":",
                                       endHeading, newline, NULL);
                 } else if (count == 3) {
-                    Tcl_AppendResult (ti, newline, NULL);
+                    appendResult (ti, newline, NULL);
                 }
-                Tcl_AppendResult (ti, "   ", NULL);
+                appendResult (ti, "   ", NULL);
 
                 temp[0] = mostPlayedIdx / 10 + 'A';
                 temp[1] = mostPlayedIdx % 10 + '0';
                 temp[2] = 0;
                 if (htextOutput) {
-                    Tcl_AppendResult (ti, "<blue><run ::windows::eco::Refresh ",
+                    appendResult (ti, "<blue><run ::windows::eco::Refresh ",
                                       temp, ">", NULL);
                 }
-                Tcl_AppendResult (ti, temp, NULL);
+                appendResult (ti, temp, NULL);
                 if (htextOutput) {
-                    Tcl_AppendResult (ti, "</run></blue>", NULL);
+                    appendResult (ti, "</run></blue>", NULL);
                 }
                 sprintf (temp, ":%3u (%u%%)", mostPlayed,
                          ecoScore[color][mostPlayedIdx] * 50 / mostPlayed);
-                Tcl_AppendResult (ti, temp, NULL);
+                appendResult (ti, temp, NULL);
                 ecoCount[color][mostPlayedIdx] = 0;
             }
         }
@@ -7582,7 +7802,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
   doRatings:
     if (seenRating) {
         if (! ratingsOnly) {
-            Tcl_AppendResult (ti, newline, newline, startHeading,
+            appendResult (ti, newline, newline, startHeading,
                               translate (ti, "PInfoRating"), ":",
                               endHeading, NULL);
         }
@@ -7595,27 +7815,27 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
                 uint month = 1 + (i % 12);
                 if (ratingsOnly) {
                     sprintf (temp, "%4u.%02u", year, (month - 1) * 100 / 12);
-                    Tcl_AppendElement (ti, temp);
+                    appendStringElement (ti, temp);
                     sprintf (temp, "%4u", elo);
-                    Tcl_AppendElement (ti, temp);
+                    appendStringElement (ti, temp);
                 } else {
                     if (previousElo != elo) {
                         previousElo = elo;
                         count++;
                         if (count % 2) {
-                            Tcl_AppendResult (ti, newline, NULL);
+                            appendResult (ti, newline, NULL);
                         } else {
-                            Tcl_AppendResult (ti, "   ", NULL);
+                            appendResult (ti, "   ", NULL);
                         }
                         sprintf (temp, "    %4u.%02u   %4u", year, month, elo);
-                        Tcl_AppendResult (ti, temp, NULL);
+                        appendResult (ti, temp, NULL);
                     }
                 }
             }
         }
     }
     delete[] eloByMonth;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -7630,7 +7850,7 @@ sc_name_info (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    3rd arg: maximum number of matches to return.
 //    Example: sc_nameMatch player "Speel" 10
 int
-sc_name_match (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_name_match (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = \
         "Usage: sc_name match [-elo] <nameType> <prefix> <maxMatches>";
@@ -7655,21 +7875,22 @@ sc_name_match (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     const char * prefix = argv[arg++];
     uint maxMatches = strGetUnsigned (argv[arg++]);
-    if (maxMatches == 0) { return TCL_OK; }
+    if (maxMatches == 0) { return SCID_OK; }
     idNumberT * array = new idNumberT [maxMatches];
     uint matches = db->getNameBase()->GetFirstMatches (nt, prefix, maxMatches, array);
+    UI_List res(ti);
     for (uint i=0; i < matches; i++) {
         uint freq = db->getNameFreq(nt, array[i]);
         const char * str = db->getNameBase()->GetName (nt, array[i]);
-        appendUintElement (ti, freq);
-        Tcl_AppendElement (ti, str);
+        res.push_back(freq);
+        res.push_back(str);
         if (nt == NAME_PLAYER  &&  eloMode) {
-            appendUintElement (ti, db->getNameBase()->GetElo (array[i]));
+            res.push_back(db->getNameBase()->GetElo (array[i]));
         }
     }
     delete[] array;
 
-    return TCL_OK;
+    return UI_Result(ti, OK, res);
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -7730,7 +7951,7 @@ public:
 };
 
 int
-sc_name_plist (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_name_plist (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usage = "Usage: sc_name plist [-<option> <value> ...]";
 
@@ -7814,8 +8035,8 @@ sc_name_plist (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     count = std::min(count, plist.size());
     std::partial_sort(plist.begin(), plist.begin() + count, plist.end(), PListSort(dbase, activity, sortMode));
 
-    UI_List res(count);
-    UI_List info(5);
+    UI_List res(ti);
+    UI_List info(ti);
     for (size_t i=0; i < count; i++) {
         idNumberT id = plist[i];
         info.clear();
@@ -7951,7 +8172,7 @@ UI_res_t sc_name_ratings (UI_handle_t ti, scidBaseT& dbase, const SpellChecker&
     }
     if (numChangedGames > 0) dbase.clearCaches();
 
-    UI_List res(2);
+    UI_List res(ti);
     res.push_back(numChangedRatings);
     res.push_back(numChangedGames);
     return UI_Result(ti, OK, res);
@@ -7965,7 +8186,7 @@ UI_res_t sc_name_ratings (UI_handle_t ti, scidBaseT& dbase, const SpellChecker&
 //   If there is no filename argument, sc_name_read just returns the same
 //   list for the current spellchecker status without reading a new file.
 int
-sc_name_read (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_name_read (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc > 5) {
         return UI_Result(ti, ERROR_BadArg, "Usage: sc_name read <spellcheck-file>");
@@ -7983,7 +8204,7 @@ sc_name_read (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         progress.report(1, 1);
     }
 
-    UI_List res(NUM_NAME_TYPES);
+    UI_List res(ti);
     for (nameT i = 0; i < NUM_NAME_TYPES; i++) {
         uint n = (spellChk == NULL) ? 0 : spellChk->numCorrectNames(i);
         res.push_back(n);
@@ -8186,7 +8407,7 @@ avgGameLength (resultT result)
 }
 
 int
-sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_report (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "avgLength", "best", "counts", "create", "eco", "elo",
@@ -8240,7 +8461,7 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         }
         dstr = new DString;
         report->BestGames (dstr, strGetUnsigned(argv[4]), argv[3]);
-        Tcl_AppendResult (ti, dstr->Data(), NULL);
+        appendResult (ti, dstr->Data(), NULL);
         break;
 
     case OPT_COUNTS:
@@ -8255,9 +8476,9 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         if (argc > 3) {
             dstr = new DString();
             report->TopEcoCodes (dstr, strGetUnsigned(argv[3]));
-            Tcl_AppendResult (ti, dstr->Data(), NULL);
+            appendResult (ti, dstr->Data(), NULL);
         } else {
-            Tcl_AppendResult (ti, report->GetEco(), NULL);
+            appendResult (ti, report->GetEco(), NULL);
         }
         break;
 
@@ -8283,7 +8504,7 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         report->EndMaterialReport (dstr,
                        translate (ti, "OprepReportGames", "Report games"),
                        translate (ti, "OprepAllGames", "All games"));
-        Tcl_AppendResult (ti, dstr->Data(), NULL);
+        appendResult (ti, dstr->Data(), NULL);
         break;
 
     case OPT_FORMAT:
@@ -8308,7 +8529,7 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     case OPT_LINE:
         dstr = new DString;
         report->PrintStemLine (dstr);
-        Tcl_AppendResult (ti, dstr->Data(), NULL);
+        appendResult (ti, dstr->Data(), NULL);
         break;
 
     case OPT_MAX:
@@ -8325,7 +8546,7 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         }
         dstr = new DString;
         report->PopularMoveOrders (dstr, strGetUnsigned(argv[3]));
-        Tcl_AppendResult (ti, dstr->Data(), NULL);
+        appendResult (ti, dstr->Data(), NULL);
         break;
 
     case OPT_NOTES:
@@ -8354,7 +8575,7 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             if (argv[3][0] == 'B'  ||  argv[3][0] == 'b') { color = BLACK; }
             dstr = new DString;
             report->TopPlayers (dstr, color, strGetUnsigned(argv[4]));
-            Tcl_AppendResult (ti, dstr->Data(), NULL);
+            appendResult (ti, dstr->Data(), NULL);
         }
         break;
 
@@ -8370,7 +8591,7 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         dstr = new DString;
         report->PrintTable (dstr, argc > 4 ? argv[4] : "",
                              argc > 5 ? argv[5] : "");
-        Tcl_AppendResult (ti, dstr->Data(), NULL);
+        appendResult (ti, dstr->Data(), NULL);
         break;
 
     case OPT_SCORE:
@@ -8396,7 +8617,7 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     case OPT_THEMES:
         dstr = new DString;
         report->ThemeReport (dstr, argc - 3, (const char **) argv + 3);
-        Tcl_AppendResult (ti, dstr->Data(), NULL);
+        appendResult (ti, dstr->Data(), NULL);
         break;
 
     default:
@@ -8404,7 +8625,7 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
 
     if (dstr != NULL) { delete dstr; }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -8415,7 +8636,7 @@ sc_report (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    the Tcl code that calls this need to ensure that
 //    is done first.
 int
-sc_report_create (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_report_create (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     uint maxThemeMoveNumber = 20;
     uint maxExtraMoves = 1;
@@ -8493,7 +8714,7 @@ sc_report_create (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
     progress.report(1,1);
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -8502,7 +8723,7 @@ sc_report_create (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    in the opening report matching the specified
 //    opening/endgame theme or note number.
 int
-sc_report_select (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_report_select (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * usage =
         "Usage: sc_report opening|player select <op|eg|note> <number>";
@@ -8532,7 +8753,7 @@ sc_report_select (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
     delete[] matches;
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -8540,7 +8761,7 @@ sc_report_select (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //  SEARCH and TREE functions
 
 int
-sc_tree (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_tree (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "best", "move", "positions", "search", "size",
@@ -8578,7 +8799,7 @@ sc_tree (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_tree", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -8589,7 +8810,7 @@ sc_tree (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    It can also be "random" to request a random move selected
 //    according to the frequency of each move in the tree.
 int
-sc_tree_move (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_tree_move (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 4) {
         return errorResult (ti, "Usage: sc_tree move <baseNum> <lineNum>");
@@ -8601,7 +8822,7 @@ sc_tree_move (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     int selection = strGetInteger (argv[3]);
     if (argv[3][0] == 'r'  &&  strIsPrefix (argv[3], "random")) {
         uint total = base->tree.totalCount;
-        if (total == 0) { return TCL_OK; }
+        if (total == 0) { return SCID_OK; }
         uint r = rand() % total;
         uint sum = 0;
         for (uint i=0; i < base->tree.moveCount; i++) {
@@ -8616,7 +8837,7 @@ sc_tree_move (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     if (selection < 1  ||  selection > (int)(base->tree.moveCount)) {
         // Not a valid selection. We ignore it (e.g. the user clicked on a
         // line with no move on it).
-        return TCL_OK;
+        return SCID_OK;
     }
 
     const treeNodeT* node = &(base->tree.node[selection - 1]);
@@ -8624,11 +8845,11 @@ sc_tree_move (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     // If the san string first char is not a letter, it is the
     // empty move (e.g. "[end]") so we do NOT add a move:
     if (! isalpha(node->san[0])) {
-        return TCL_OK;
+        return SCID_OK;
     }
 
-    Tcl_AppendResult (ti, node->san, NULL);
-    return TCL_OK;
+    appendResult (ti, node->san, NULL);
+    return SCID_OK;
 }
 
 // Enumeration of possible move-sorting methods for tree mode:
@@ -8687,7 +8908,7 @@ sortTreeMoves (treeT * tree, int sortMethod, colorT toMove)
 // sc_tree_search:
 //    Returns the tree for the current position
 int
-sc_tree_search (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_tree_search (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * usageStr =
       "Usage: sc_tree search [-hideMoves <0|1>] [-sort alpha|eco|frequency|score] [-time <0|1>]";
@@ -8727,7 +8948,7 @@ sc_tree_search (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
             inFilterOnly = strGetBoolean (argv[arg+1]);
         } else if (strIsPrefix (argv[arg], "-cancel")) {
         	search_pool.clear();
-        	return TCL_OK;
+        	return SCID_OK;
         } else {
             return errorResult (ti, usageStr);
         }
@@ -9034,7 +9255,7 @@ sc_tree_search (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         output->Append (temp);
 
         if (listMode) {
-            Tcl_AppendElement (ti, (char *) output->Data());
+            appendStringElement (ti, (char *) output->Data());
             output->Clear();
         }
     }
@@ -9114,7 +9335,7 @@ sc_tree_search (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         sprintf (temp, "  %3d%%", (pctDraws + 5) / 10);
         output->Append (temp);
         if (listMode) {
-            Tcl_AppendElement (ti, (char *) output->Data());
+            appendStringElement (ti, (char *) output->Data());
             output->Clear();
         } else {
             output->Append ("\n");
@@ -9140,49 +9361,50 @@ sc_tree_search (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 #endif
 
     if (! listMode) {
-    	Tcl_AppendResult (ti, output->Data(), NULL);
+    	appendResult (ti, output->Data(), NULL);
     }
     delete output;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_tree_cachesize:
 //    set cache size
 int
-sc_tree_cachesize (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_tree_cachesize (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
   if (argc != 4) {
     return errorResult (ti, "Usage: sc_tree cachesize <base> <size>");
   }
   scidBaseT* base = DBasePool::getBase(strGetInteger(argv[2]));
   if (base) base->treeCache.CacheResize(strGetUnsigned(argv[3]));
-  return TCL_OK;
+  return SCID_OK;
 }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_tree_cacheinfo:
 //    returns a list of 2 values : used slots and max cache size
 int
-sc_tree_cacheinfo (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_tree_cacheinfo (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
   if (argc != 3) {
     return errorResult (ti, "Usage: sc_tree cacheinfo <base>");
   }
   scidBaseT* base = DBasePool::getBase(strGetInteger(argv[2]));
+  UI_List ret(ti);
   if (base) {
-    appendUintElement (ti, base->treeCache.UsedSize());
-    appendUintElement (ti, base->treeCache.Size());
+    ret.push_back(base->treeCache.UsedSize());
+    ret.push_back(base->treeCache.Size());
   } else {
-    appendUintElement (ti, 0);
-    appendUintElement (ti, 0);
+    ret.push_back(0);
+    ret.push_back(0);
   }
-  return TCL_OK;
+  return UI_Result(ti, OK, ret);
 }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_search:
 //    Search function interface.
 int
-sc_search (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_search (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "board", "header", "material", NULL
@@ -9191,7 +9413,7 @@ sc_search (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 
     int index = -1;
     if (argc > 1) { index = strUniqueMatch (argv[1], options); }
-    int ret = TCL_OK;
+    int ret = SCID_OK;
 
     if (!db->inUse) {
         return errorResult (ti, errMsgNotOpen(ti));
@@ -9226,7 +9448,7 @@ sc_search (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 //    if <base> is present, search for current position in base <base>,
 //    and sets <base> filter accordingly
 int
-sc_search_board (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_search_board (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     const char * usageStr =
         "Usage: sc_search board <filterOp> <searchType> <searchInVars> <flip> [<base>]";
@@ -9432,18 +9654,18 @@ sc_search_board (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     char temp[200];
     int centisecs = timer.CentiSecs();
     if (gameNum != dbase->numGames()) {
-        Tcl_AppendResult (ti, errMsgSearchInterrupted(ti), "  ", NULL);
+        appendResult (ti, errMsgSearchInterrupted(ti), "  ", NULL);
     }
     sprintf (temp, "%d / %d  (%d%c%02d s)",
              filter.count(), startFilterCount,
              centisecs / 100, decimalPointChar, centisecs % 100);
-    Tcl_AppendResult (ti, temp, NULL);
+    appendResult (ti, temp, NULL);
 #ifdef SHOW_SKIPPED_STATS
     sprintf(temp, "  Skipped %u games.", skipcount);
-    Tcl_AppendResult (ti, temp, NULL);
+    appendResult (ti, temp, NULL);
 #endif
 
-return TCL_OK;
+return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -9575,7 +9797,7 @@ parsePattern (const char * str, patternT * patt)
 // sc_search_material:
 //    Searches by material and/or pattern.
 int
-sc_search_material (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_search_material (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (! db->inUse) {
         return errorResult (ti, "Not an open database.");
@@ -9675,8 +9897,8 @@ sc_search_material (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
 
         case OPT_PATTERN:
             if (parsePattern (value, &tempPatt) != OK) {
-                Tcl_AppendResult (ti, "Invalid pattern: ", value, NULL);
-                return TCL_ERROR;
+                appendResult (ti, "Invalid pattern: ", value, NULL);
+                return SCID_ERROR;
             }
             // Only add to lists if a pattern was specified:
             if (tempPatt.pieceMatch == EMPTY) { break; }
@@ -9895,18 +10117,18 @@ sc_search_material (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     int centisecs = timer.CentiSecs();
 
     if (gameNum != n) {
-        Tcl_AppendResult (ti, errMsgSearchInterrupted(ti), "  ", NULL);
+        appendResult (ti, errMsgSearchInterrupted(ti), "  ", NULL);
     }
     sprintf (temp, "%d / %d  (%d%c%02d s)",
              filter.count(), startFilterCount,
              centisecs / 100, decimalPointChar, centisecs % 100);
-    Tcl_AppendResult (ti, temp, NULL);
+    appendResult (ti, temp, NULL);
 #ifdef SHOW_SKIPPED_STATS
     sprintf(temp, "  Skipped %u games.", skipcount);
-    Tcl_AppendResult (ti, temp, NULL);
+    appendResult (ti, temp, NULL);
 #endif
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 
@@ -9983,7 +10205,7 @@ parseTitles (const char * str)
 // sc_search_header:
 //    Searches by header information.
 int
-sc_search_header (ClientData cd, Tcl_Interp * ti, scidBaseT* base, HFilter& filter, int argc, const char ** argv)
+sc_search_header (ClientData cd, UI_handle_t ti, scidBaseT* base, HFilter& filter, int argc, const char ** argv)
 {
     ASSERT(argc >= 2);
     Progress progress = UI_CreateProgress(ti);
@@ -10059,10 +10281,14 @@ sc_search_header (ClientData cd, Tcl_Interp * ti, scidBaseT* base, HFilter& filt
             break;
 
         case OPT_PGN:
+#ifndef NODEJS
             if (Tcl_SplitList (ti, (char *)value, &pgnTextCount,
-                               (CONST84 char ***) &sPgnText) != TCL_OK) {
-                return TCL_ERROR;
+                               (CONST84 char ***) &sPgnText) != SCID_OK) {
+                return SCID_ERROR;
             }
+#else
+            printf("STUB: Tcl_SplitList\n");
+#endif
             break;
 
         }
@@ -10237,7 +10463,11 @@ sc_search_header (ClientData cd, Tcl_Interp * ti, scidBaseT* base, HFilter& filt
     if (wTitles != NULL) { delete[] wTitles; }
     if (bTitles != NULL) { delete[] bTitles; }
 
+#ifndef NODEJS
     Tcl_Free ((char *) sPgnText);
+#else
+    printf("STUB: Tcl_Free\n");
+#endif
 
     progress.report(1,1);
 
@@ -10249,7 +10479,7 @@ sc_search_header (ClientData cd, Tcl_Interp * ti, scidBaseT* base, HFilter& filt
 //  VARIATION creation/deletion/navigation functions.
 
 int
-sc_var (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_var (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "count", "number", "create", "delete", "deletefree", "enter", "exit", "first",
@@ -10311,14 +10541,14 @@ sc_var (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_var", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_var_delete:
 //    Deletes a specified variation and free moves
 int
-sc_var_delete_free (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_var_delete_free (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
 
     if (argc != 3) {
@@ -10331,14 +10561,14 @@ sc_var_delete_free (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
     }
     db->game->DeleteVariationAndFree (varNumber);
     db->gameAltered = true;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_var_delete:
 //    Deletes a specified variation.
 int
-sc_var_delete (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_var_delete (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
 
     if (argc != 3) {
@@ -10351,14 +10581,14 @@ sc_var_delete (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
     db->game->DeleteVariation (varNumber);
     db->gameAltered = true;
-    return TCL_OK;
+    return SCID_OK;
 }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_var_first:
 //    Promotes the specified variation of the current to be the
 //    first in the list.
 int
-sc_var_first (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_var_first (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_var first <number>");
@@ -10370,14 +10600,14 @@ sc_var_first (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     }
     db->game->FirstVariation (varNumber);
     db->gameAltered = true;
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_var_list:
 //    Returns a Tcl list of the variations for the current move.
 int
-sc_var_list (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_var_list (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     bool uci = (argc > 2) && ! strCompare("UCI", argv[2]);
     uint varCount = db->game->GetNumVariations();
@@ -10387,17 +10617,17 @@ sc_var_list (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         if (uci) db->game->GetNextMoveUCI (s);
         else db->game->GetSAN (s);
         // if (s[0] == 0) { strCopy (s, "(empty)"); }
-        Tcl_AppendElement (ti, s);
+        appendStringElement (ti, s);
         db->game->MoveExitVariation ();
     }
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_var_enter:
 //    Moves into a specified variation.
 int
-sc_var_enter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_var_enter (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_var enter <number>");
@@ -10415,14 +10645,14 @@ sc_var_enter (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     // Uncomment the following line to auto-play the first move:
     db->game->MoveForward();
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //////////////////////////////////////////////////////////////////////
 ///  BOOK functions
 
 int
-sc_book (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_book (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     static const char * options [] = {
         "load", "close", "moves", "positions", "movesupdate", "update", NULL
@@ -10457,14 +10687,14 @@ sc_book (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
         return InvalidCommand (ti, "sc_book", options);
     }
 
-    return TCL_OK;
+    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_book_load:
 //    Opens and loads a .bin book (fruit format)
 int
-sc_book_load (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_book_load (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 4) {
         return errorResult (ti, "Usage: sc_book load bookfile slot");
@@ -10481,19 +10711,19 @@ sc_book_load (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
 		   // state == 1: book is read only
 			return setIntResult (ti, bookstate);
 	 }
-    return TCL_OK;
+    return SCID_OK;
 
 //--//    if (polyglot_open(argv[2], slot) == -1 ) {
 //--//			return errorResult (ti, "Unable to load book");
 //--//		}
-//--//    return TCL_OK;
+//--//    return SCID_OK;
 }
 
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_book_close:
 //    Closes the previously loaded book
 int
-sc_book_close (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_book_close (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 3) {
         return errorResult (ti, "Usage: sc_book close slot");
@@ -10502,13 +10732,13 @@ sc_book_close (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     if (polyglot_close(slot) == -1 ) {
 			return errorResult (ti, "Error closing book");
 		}
-    return TCL_OK;
+    return SCID_OK;
 }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_book_moves:
 //    returns a list of all moves contained in opened book and their probability in a TCL list
 int
-sc_book_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_book_moves (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
 		char moves[200] = "";
 		char boardStr[100];
@@ -10518,14 +10748,14 @@ sc_book_moves (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     uint slot = strGetUnsigned (argv[2]);
 		db->game->GetCurrentPos()->PrintFEN (boardStr, FEN_ALL_FIELDS);
 		polyglot_moves(moves, (const char *) boardStr, slot);
-    Tcl_AppendResult (ti, moves, NULL);
-    return TCL_OK;
+    appendResult (ti, moves, NULL);
+    return SCID_OK;
 }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_positions:
 //    returns a TCL list of moves to a position in the book
 int
-sc_book_positions (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_book_positions (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
 		char moves[200] = "";
 		char boardStr[100];
@@ -10535,34 +10765,34 @@ sc_book_positions (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
     uint slot = strGetUnsigned (argv[2]);
 		db->game->GetCurrentPos()->PrintFEN (boardStr, FEN_ALL_FIELDS);
 		polyglot_positions(moves, (const char *) boardStr, slot);
-    Tcl_AppendResult (ti, moves, NULL);
-    return TCL_OK;
+    appendResult (ti, moves, NULL);
+    return SCID_OK;
 }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_book_update:
 //    updates the opened book with probability values
 int
-sc_book_update (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_book_update (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 4) {
         return errorResult (ti, "Usage: sc_book update <probs> slot");
     }
     uint slot = strGetUnsigned (argv[3]);
 		scid_book_update( (char*) argv[2], slot );
-    return TCL_OK;
+    return SCID_OK;
 }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 // sc_book_movesupdate:
 //    updates the opened book with moves and probability values
 int
-sc_book_movesupdate (ClientData cd, Tcl_Interp * ti, int argc, const char ** argv)
+sc_book_movesupdate (ClientData cd, UI_handle_t ti, int argc, const char ** argv)
 {
     if (argc != 6) {
         return errorResult (ti, "Usage: sc_book movesupdate <moves> <probs> slot tempfile");
     }
     uint slot = strGetUnsigned (argv[4]);
     scid_book_movesupdate( (char*) argv[2], (char*) argv[3], slot, (char*) argv[5] );
-    return TCL_OK;
+    return SCID_OK;
 }
 //////////////////////////////////////////////////////////////////////
 /// END of tkscid.cpp
diff --git a/src/tkscid.h b/src/tkscid.h
index 19797a3..e1e4b88 100644
--- a/src/tkscid.h
+++ b/src/tkscid.h
@@ -13,117 +13,121 @@
 //
 //////////////////////////////////////////////////////////////////////
 
-
+#ifndef NODEJS
 #include "tcl.h"
+#else
+typedef void *ClientData;
+#endif
 
 class Progress;
 struct scidBaseT;
 
 
-// Macro TCL_ARGS expands to the argument-type list that any
+
+// Macro SCID_ARGS expands to the argument-type list that any
 // Tcl command function takes.
-#define TCL_ARGS  ClientData cd, Tcl_Interp * ti, int argc, const char ** argv
-
-
-int sc_eco_base       (TCL_ARGS);
-int sc_eco_game       (TCL_ARGS);
-int sc_eco_read       (TCL_ARGS);
-int sc_eco_summary    (TCL_ARGS);
-int sc_eco_translate  (TCL_ARGS);
-
-int sc_filter_first   (TCL_ARGS);
-int sc_filter_freq    (scidBaseT* dbase, const HFilter& filter, Tcl_Interp * ti, int argc, const char ** argv);
-int sc_filter_last    (TCL_ARGS);
-int sc_filter_next    (TCL_ARGS);
-int sc_filter_prev    (TCL_ARGS);
-int sc_filter_stats   (TCL_ARGS);
-
-int sc_game_crosstable (TCL_ARGS);
-int sc_game_find      (TCL_ARGS);
-int sc_game_firstMoves (TCL_ARGS);
-int sc_game_import    (TCL_ARGS);
-int sc_game_info      (TCL_ARGS);
-int sc_game_load      (TCL_ARGS);
-int sc_game_merge     (TCL_ARGS);
-int sc_game_moves     (TCL_ARGS);
-int sc_game_novelty   (TCL_ARGS);
-int sc_game_new       (TCL_ARGS);
-int sc_game_pgn       (TCL_ARGS);
-int sc_game_pop       (TCL_ARGS);
-int sc_game_push      (TCL_ARGS);
-int sc_game_save      (TCL_ARGS);
-int sc_game_scores    (TCL_ARGS);
-int sc_game_startBoard (TCL_ARGS);
-int sc_game_strip     (TCL_ARGS);
-int sc_game_summary   (TCL_ARGS);
-int sc_game_tags      (TCL_ARGS);
-int sc_game_tags_get  (TCL_ARGS);
-int sc_game_tags_set  (TCL_ARGS);
-int sc_game_tags_reload (TCL_ARGS);
-int sc_game_tags_share (TCL_ARGS);
-
-int sc_info_fsize     (TCL_ARGS);
-int sc_info_limit     (TCL_ARGS);
-int sc_info_suffix    (TCL_ARGS);
-int sc_info_tb        (TCL_ARGS);
-
-int sc_move_add       (TCL_ARGS);
-int sc_move_addSan    (TCL_ARGS);
-int sc_move_addUCI    (TCL_ARGS);
-int sc_move_back      (TCL_ARGS);
-int sc_move_forward   (TCL_ARGS);
-int sc_move_pgn       (TCL_ARGS);
-
-int sc_name_correct   (TCL_ARGS);
-int sc_name_edit      (TCL_ARGS);
-int sc_name_info      (TCL_ARGS);
-int sc_name_match     (TCL_ARGS);
-int sc_name_plist     (TCL_ARGS);
-int sc_name_read      (TCL_ARGS);
-
-int sc_report_create  (TCL_ARGS);
-int sc_report_select  (TCL_ARGS);
-
-int sc_pos_addNag     (TCL_ARGS);
-int sc_pos_analyze    (TCL_ARGS);
-int sc_pos_bestSquare (TCL_ARGS);
-int sc_pos_getNags    (TCL_ARGS);
-int sc_pos_hash       (TCL_ARGS);
-int sc_pos_html       (TCL_ARGS);
-int sc_pos_isAt       (TCL_ARGS);
-int sc_pos_isLegal    (TCL_ARGS);
-int sc_pos_isPromo    (TCL_ARGS);
-int sc_pos_matchMoves (TCL_ARGS);
-int sc_pos_moves      (TCL_ARGS);
-int sc_pos_pgnBoard   (TCL_ARGS);
-int sc_pos_probe      (TCL_ARGS);
-int sc_pos_probe_board (TCL_ARGS);
-int sc_pos_setComment (TCL_ARGS);
-
-int sc_tree_move      (TCL_ARGS);
-int sc_tree_search    (TCL_ARGS);
-int sc_tree_cachesize (TCL_ARGS);
-int sc_tree_cacheinfo (TCL_ARGS);
-
-int sc_var_delete     (TCL_ARGS);
-int sc_var_delete_free(TCL_ARGS);
-int sc_var_enter      (TCL_ARGS);
-int sc_var_first      (TCL_ARGS);
-int sc_var_list       (TCL_ARGS);
+#define SCID_ARGS  ClientData cd, UI_handle_t ti, int argc, const char ** argv
+
+
+int sc_eco_base       (SCID_ARGS);
+int sc_eco_game       (SCID_ARGS);
+int sc_eco_read       (SCID_ARGS);
+int sc_eco_summary    (SCID_ARGS);
+int sc_eco_translate  (SCID_ARGS);
+
+int sc_filter_first   (SCID_ARGS);
+int sc_filter_freq    (scidBaseT* dbase, const HFilter& filter, UI_handle_t ti, int argc, const char ** argv);
+int sc_filter_last    (SCID_ARGS);
+int sc_filter_next    (SCID_ARGS);
+int sc_filter_prev    (SCID_ARGS);
+int sc_filter_stats   (SCID_ARGS);
+
+int sc_game_crosstable (SCID_ARGS);
+int sc_game_find      (SCID_ARGS);
+int sc_game_firstMoves (SCID_ARGS);
+int sc_game_import    (SCID_ARGS);
+int sc_game_info      (SCID_ARGS);
+int sc_game_load      (SCID_ARGS);
+int sc_game_merge     (SCID_ARGS);
+int sc_game_moves     (SCID_ARGS);
+int sc_game_novelty   (SCID_ARGS);
+int sc_game_new       (SCID_ARGS);
+int sc_game_pgn       (SCID_ARGS);
+int sc_game_pop       (SCID_ARGS);
+int sc_game_push      (SCID_ARGS);
+int sc_game_save      (SCID_ARGS);
+int sc_game_scores    (SCID_ARGS);
+int sc_game_startBoard (SCID_ARGS);
+int sc_game_strip     (SCID_ARGS);
+int sc_game_summary   (SCID_ARGS);
+int sc_game_tags      (SCID_ARGS);
+int sc_game_tags_get  (SCID_ARGS);
+int sc_game_tags_set  (SCID_ARGS);
+int sc_game_tags_reload (SCID_ARGS);
+int sc_game_tags_share (SCID_ARGS);
+
+int sc_info_fsize     (SCID_ARGS);
+int sc_info_limit     (SCID_ARGS);
+int sc_info_suffix    (SCID_ARGS);
+int sc_info_tb        (SCID_ARGS);
+
+int sc_move_add       (SCID_ARGS);
+int sc_move_addSan    (SCID_ARGS);
+int sc_move_addUCI    (SCID_ARGS);
+int sc_move_back      (SCID_ARGS);
+int sc_move_forward   (SCID_ARGS);
+int sc_move_pgn       (SCID_ARGS);
+
+int sc_name_correct   (SCID_ARGS);
+int sc_name_edit      (SCID_ARGS);
+int sc_name_info      (SCID_ARGS);
+int sc_name_match     (SCID_ARGS);
+int sc_name_plist     (SCID_ARGS);
+int sc_name_read      (SCID_ARGS);
+
+int sc_report_create  (SCID_ARGS);
+int sc_report_select  (SCID_ARGS);
+
+int sc_pos_addNag     (SCID_ARGS);
+int sc_pos_analyze    (SCID_ARGS);
+int sc_pos_bestSquare (SCID_ARGS);
+int sc_pos_getNags    (SCID_ARGS);
+int sc_pos_hash       (SCID_ARGS);
+int sc_pos_html       (SCID_ARGS);
+int sc_pos_isAt       (SCID_ARGS);
+int sc_pos_isLegal    (SCID_ARGS);
+int sc_pos_isPromo    (SCID_ARGS);
+int sc_pos_matchMoves (SCID_ARGS);
+int sc_pos_moves      (SCID_ARGS);
+int sc_pos_pgnBoard   (SCID_ARGS);
+int sc_pos_probe      (SCID_ARGS);
+int sc_pos_probe_board (SCID_ARGS);
+int sc_pos_setComment (SCID_ARGS);
+
+int sc_tree_move      (SCID_ARGS);
+int sc_tree_search    (SCID_ARGS);
+int sc_tree_cachesize (SCID_ARGS);
+int sc_tree_cacheinfo (SCID_ARGS);
+
+int sc_var_delete     (SCID_ARGS);
+int sc_var_delete_free(SCID_ARGS);
+int sc_var_enter      (SCID_ARGS);
+int sc_var_first      (SCID_ARGS);
+int sc_var_list       (SCID_ARGS);
 
 errorT search_index(const scidBaseT* base, HFilter& filter, int argc, const char ** argv, const Progress& progress);
-int sc_search_board   (TCL_ARGS);
-int sc_search_material (TCL_ARGS);
-int sc_search_header  (ClientData cd, Tcl_Interp * ti, scidBaseT* base, HFilter& filter, int argc, const char ** argv);
-int sc_search_rep_add (TCL_ARGS);
-int sc_search_rep_go  (TCL_ARGS);
-
-int sc_book_load      (TCL_ARGS);
-int sc_book_close     (TCL_ARGS);
-int sc_book_moves     (TCL_ARGS);
-int sc_book_positions (TCL_ARGS);
-int sc_book_update    (TCL_ARGS);
-int sc_book_movesupdate (TCL_ARGS);
+int sc_search_board   (SCID_ARGS);
+int sc_search_material (SCID_ARGS);
+int sc_search_header  (ClientData cd, UI_handle_t ti, scidBaseT* base, HFilter& filter, int argc, const char ** argv);
+int sc_search_rep_add (SCID_ARGS);
+int sc_search_rep_go  (SCID_ARGS);
+
+int sc_book_load      (SCID_ARGS);
+int sc_book_close     (SCID_ARGS);
+int sc_book_moves     (SCID_ARGS);
+int sc_book_positions (SCID_ARGS);
+int sc_book_update    (SCID_ARGS);
+int sc_book_movesupdate (SCID_ARGS);
 //////////////////////////////////////////////////////////////////////
 /// END of tkscid.h
 //////////////////////////////////////////////////////////////////////
diff --git a/src/ui.h b/src/ui.h
index 50aa959..06ddc78 100644
--- a/src/ui.h
+++ b/src/ui.h
@@ -20,7 +20,9 @@
 #define SCID_UI__H
 
 #include "misc.h"
-#ifndef CHECKUIDEP
+#if defined(NODEJS)
+#include "ui_nodejs.h"
+#elif !defined(CHECKUIDEP)
 #include "ui_tcltk.h"
 #else
 //Dummy functions useful to catch unwanted dependencies
@@ -162,8 +164,8 @@ inline UI_res_t UI_Result(UI_handle_t ti, errorT res, const T& value) {
  */
 class UI_List : public UI_impl::List {
 public:
-	explicit UI_List(size_t max_size)
-	: UI_impl::List(max_size) {
+	explicit UI_List(UI_handle_t args)
+	: UI_impl::List(args) {
 	}
 
 	/**
diff --git a/src/ui_tcltk.h b/src/ui_tcltk.h
index f9e1ade..51fb531 100644
--- a/src/ui_tcltk.h
+++ b/src/ui_tcltk.h
@@ -23,6 +23,7 @@
 #include <tcl.h>
 #include <sstream>
 #include <limits>
+#include <vector>
 
 namespace UI_impl {
 
@@ -106,34 +107,30 @@ inline Progress CreateProgressPosMask(UI_handle_t data) {
 
 
 class List {
-	Tcl_Obj** list_;
+    std::vector<Tcl_Obj*> list_;
 	int i_;
-	Tcl_Obj* stackBuf_[6];
 
 	friend Tcl_Obj* ObjMaker(const List&);
 
 public:
-	explicit List(size_t max_size)
-	: list_(stackBuf_), i_(0) {
-		const size_t stackBuf_size = sizeof(stackBuf_)/sizeof(stackBuf_[0]);
-		if (max_size > stackBuf_size) {
-			list_ = new Tcl_Obj*[max_size];
-		}
+	explicit List(UI_handle_t args)
+	: i_(0) {
 	}
 
 	~List() {
 		clear();
-		if (list_ != stackBuf_) delete [] list_;
 	}
 
 	void clear() {
 		for (int i=0; i < i_; i++) Tcl_DecrRefCount(list_[i]);
 		i_ = 0;
+        list_.clear();
 	}
 
 	void push_back(Tcl_Obj* value) {
 		ASSERT(value != 0);
-		list_[i_++] = value;
+		list_.push_back(value);
+        i_++;
 	}
 	template <typename T>
 	void push_back(const T& value);
@@ -163,7 +160,7 @@ inline Tcl_Obj* ObjMaker(const std::string& s) {
 	return Tcl_NewStringObj(s.c_str(), s.length());
 }
 inline Tcl_Obj* ObjMaker(const List& v) {
-	Tcl_Obj* res = Tcl_NewListObj(v.i_, v.list_);
+	Tcl_Obj* res = Tcl_NewListObj(v.i_, v.list_.data());
 	const_cast<List&>(v).i_ = 0;
 	return res;
 }
-- 
2.7.4

